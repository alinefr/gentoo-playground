--- wscript.orig	2015-03-13 18:37:06.049267031 +0000
+++ wscript	2015-03-13 18:31:20.568785672 +0000
@@ -104,7 +104,7 @@
     conf.find_program('xsltproc', var='XSLTPROC')
 
     conf.SAMBA_CHECK_PYTHON(mandatory=True, version=(2,5,0))
-    conf.SAMBA_CHECK_PYTHON_HEADERS(mandatory=True)
+    conf.SAMBA_CHECK_PYTHON_HEADERS(mandatory=False)
 
     if sys.platform == 'darwin' and not conf.env['HAVE_ENVIRON_DECL']:
         # Mac OSX needs to have this and it's also needed that the python is compiled with this
@@ -185,8 +185,8 @@
 
     # we don't want PYTHONDIR in config.h, as otherwise changing
     # --prefix causes a complete rebuild
-    del(conf.env.defines['PYTHONDIR'])
-    del(conf.env.defines['PYTHONARCHDIR'])
+#    del(conf.env.defines['PYTHONDIR'])
+#    del(conf.env.defines['PYTHONARCHDIR'])
 
     if not conf.CHECK_CODE('#include "tests/summary.c"',
                            define='SUMMARY_PASSES',
@@ -258,47 +258,47 @@
     pass
 
 
-def pydoctor(ctx):
-    '''build python apidocs'''
-    bp = os.path.abspath('bin/python')
-    mpaths = {}
-    for m in ['talloc', 'tdb', 'ldb', 'ntdb']:
-        f = os.popen("PYTHONPATH=%s python -c 'import %s; print %s.__file__'" % (bp, m, m), 'r')
-        try:
-            mpaths[m] = f.read().strip()
-        finally:
-            f.close()
-    cmd='PYTHONPATH=%s pydoctor --introspect-c-modules --project-name=Samba --project-url=http://www.samba.org --make-html --docformat=restructuredtext --add-package bin/python/samba --add-module %s --add-module %s --add-module %s' % (
-        bp, mpaths['tdb'], mpaths['ldb'], mpaths['talloc'], mpaths['ntdb'])
-    print("Running: %s" % cmd)
-    status = os.system(cmd)
-    if os.WEXITSTATUS(status):
-        raise Utils.WafError('pydoctor failed')
-
-
-def pep8(ctx):
-    '''run pep8 validator'''
-    cmd='PYTHONPATH=bin/python pep8 -r bin/python/samba'
-    print("Running: %s" % cmd)
-    status = os.system(cmd)
-    if os.WEXITSTATUS(status):
-        raise Utils.WafError('pep8 failed')
-
-
-def wafdocs(ctx):
-    '''build wafsamba apidocs'''
-    from samba_utils import recursive_dirlist
-    os.system('pwd')
-    list = recursive_dirlist('../buildtools/wafsamba', '.', pattern='*.py')
-
-    cmd='PYTHONPATH=bin/python pydoctor --project-name=wafsamba --project-url=http://www.samba.org --make-html --docformat=restructuredtext'
-    print(list)
-    for f in list:
-        cmd += ' --add-module %s' % f
-    print("Running: %s" % cmd)
-    status = os.system(cmd)
-    if os.WEXITSTATUS(status):
-        raise Utils.WafError('wafdocs failed')
+#def pydoctor(ctx):
+#    '''build python apidocs'''
+#    bp = os.path.abspath('bin/python')
+#    mpaths = {}
+#    for m in ['talloc', 'tdb', 'ldb', 'ntdb']:
+#        f = os.popen("PYTHONPATH=%s python -c 'import %s; print %s.__file__'" % (bp, m, m), 'r')
+#        try:
+#            mpaths[m] = f.read().strip()
+#        finally:
+#            f.close()
+#    cmd='PYTHONPATH=%s pydoctor --introspect-c-modules --project-name=Samba --project-url=http://www.samba.org --make-html --docformat=restructuredtext --add-package bin/python/samba --add-module %s --add-module %s --add-module %s' % (
+#        bp, mpaths['tdb'], mpaths['ldb'], mpaths['talloc'], mpaths['ntdb'])
+#    print("Running: %s" % cmd)
+#    status = os.system(cmd)
+#    if os.WEXITSTATUS(status):
+#        raise Utils.WafError('pydoctor failed')
+
+
+#def pep8(ctx):
+#    '''run pep8 validator'''
+#    cmd='PYTHONPATH=bin/python pep8 -r bin/python/samba'
+#    print("Running: %s" % cmd)
+#    status = os.system(cmd)
+#    if os.WEXITSTATUS(status):
+#        raise Utils.WafError('pep8 failed')
+
+
+#def wafdocs(ctx):
+#    '''build wafsamba apidocs'''
+#    from samba_utils import recursive_dirlist
+#    os.system('pwd')
+#    list = recursive_dirlist('../buildtools/wafsamba', '.', pattern='*.py')
+#
+#    cmd='PYTHONPATH=bin/python pydoctor --project-name=wafsamba --project-url=http://www.samba.org --make-html --docformat=restructuredtext'
+#    print(list)
+#    for f in list:
+#        cmd += ' --add-module %s' % f
+#    print("Running: %s" % cmd)
+#    status = os.system(cmd)
+#    if os.WEXITSTATUS(status):
+#        raise Utils.WafError('wafdocs failed')
 
 
 def dist():
--- lib/talloc/wscript~	2014-10-01 10:16:21.000000000 +0100
+++ lib/talloc/wscript	2015-03-13 18:51:47.176411416 +0000
@@ -41,15 +41,16 @@
 
     conf.env.standalone_talloc = conf.IN_LAUNCH_DIR()
 
-    conf.env.disable_python = getattr(Options.options, 'disable_python', False)
+#    conf.env.disable_python = getattr(Options.options, 'disable_python', False)
+    conf.env.disable_python = True
 
     if not conf.env.standalone_talloc:
         if conf.CHECK_BUNDLED_SYSTEM_PKG('talloc', minversion=VERSION,
                                      implied_deps='replace'):
             conf.define('USING_SYSTEM_TALLOC', 1)
-        if conf.CHECK_BUNDLED_SYSTEM_PKG('pytalloc-util', minversion=VERSION,
-                                     implied_deps='talloc replace'):
-            conf.define('USING_SYSTEM_PYTALLOC_UTIL', 1)
+#        if conf.CHECK_BUNDLED_SYSTEM_PKG('pytalloc-util', minversion=VERSION,
+#                                     implied_deps='talloc replace'):
+#            conf.define('USING_SYSTEM_PYTALLOC_UTIL', 1)
 
     conf.env.TALLOC_COMPAT1 = False
     if conf.env.standalone_talloc:
--- lib/ldb/wscript~	2015-02-24 18:59:51.000000000 +0000
+++ lib/ldb/wscript	2015-03-13 18:53:44.017425758 +0000
@@ -46,7 +46,7 @@
     conf.find_program('xsltproc', var='XSLTPROC')
     conf.check_tool('python')
     conf.check_python_version((2,4,2))
-    conf.SAMBA_CHECK_PYTHON_HEADERS(mandatory=True)
+    conf.SAMBA_CHECK_PYTHON_HEADERS(mandatory=False)
 
     # where does the default LIBDIR end up? in conf.env somewhere?
     #
@@ -59,10 +59,10 @@
                                      onlyif='talloc tdb tevent',
                                      implied_deps='replace talloc tdb tevent'):
             conf.define('USING_SYSTEM_LDB', 1)
-        if conf.CHECK_BUNDLED_SYSTEM_PKG('pyldb-util', minversion=VERSION,
-                                     onlyif='talloc tdb tevent ldb',
-                                     implied_deps='replace talloc tdb tevent ldb'):
-            conf.define('USING_SYSTEM_PYLDB_UTIL', 1)
+#        if conf.CHECK_BUNDLED_SYSTEM_PKG('pyldb-util', minversion=VERSION,
+#                                     onlyif='talloc tdb tevent ldb',
+#                                     implied_deps='replace talloc tdb tevent ldb'):
+#            conf.define('USING_SYSTEM_PYLDB_UTIL', 1)
 
     if conf.env.standalone_ldb:
         conf.CHECK_XSLTPROC_MANPAGES()
@@ -120,18 +120,18 @@
         bld.env.PACKAGE_VERSION = VERSION
         bld.env.PKGCONFIGDIR = '${LIBDIR}/pkgconfig'
 
-    if not bld.CONFIG_SET('USING_SYSTEM_PYLDB_UTIL'):
-        bld.SAMBA_LIBRARY('pyldb-util',
-                          deps='ldb',
-                          source='pyldb_util.c',
-                          public_headers='pyldb.h',
-                          public_headers_install=not private_library,
-                          vnum=VERSION,
-                          private_library=private_library,
-                          pc_files='pyldb-util.pc',
-                          pyembed=True,
-                          abi_directory='ABI',
-                          abi_match='pyldb_*')
+#    if not bld.CONFIG_SET('USING_SYSTEM_PYLDB_UTIL'):
+#        bld.SAMBA_LIBRARY('pyldb-util',
+#                          deps='ldb',
+#                          source='pyldb_util.c',
+#                          public_headers='pyldb.h',
+#                          public_headers_install=not private_library,
+#                          vnum=VERSION,
+#                          private_library=private_library,
+#                          pc_files='pyldb-util.pc',
+#                          pyembed=True,
+#                          abi_directory='ABI',
+#                          abi_match='pyldb_*')
 
     if not bld.CONFIG_SET('USING_SYSTEM_LDB'):
         if Options.is_install:
@@ -167,10 +167,10 @@
         t.env.LDB_VERSION = VERSION
 
 
-        bld.SAMBA_PYTHON('pyldb', 'pyldb.c',
-                         deps='ldb pyldb-util',
-                         realname='ldb.so',
-                         cflags='-DPACKAGE_VERSION=\"%s\"' % VERSION)
+#        bld.SAMBA_PYTHON('pyldb', 'pyldb.c',
+#                         deps='ldb pyldb-util',
+#                         realname='ldb.so',
+#                         cflags='-DPACKAGE_VERSION=\"%s\"' % VERSION)
 
         bld.SAMBA_MODULE('ldb_paged_results',
                          'modules/paged_results.c',
