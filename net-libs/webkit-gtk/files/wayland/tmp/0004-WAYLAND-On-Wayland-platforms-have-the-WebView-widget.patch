From e3aa097b6030f05eb8c086e4c5736d0434ae0d3d Mon Sep 17 00:00:00 2001
From: Iago Toral Quiroga <itoral@igalia.com>
Date: Wed, 22 Jan 2014 13:45:09 +0100
Subject: [PATCH 04/10] [WAYLAND] On Wayland platforms, have the WebView widget
 use the nested wayland compositor to gain access to the results of the
 accelerated compositing for the widget

---
 .../UIProcess/API/gtk/WebKitWebViewBase.cpp        | 99 ++++++++++++++++++----
 1 file changed, 83 insertions(+), 16 deletions(-)

diff --git a/Source/WebKit2/UIProcess/API/gtk/WebKitWebViewBase.cpp b/Source/WebKit2/UIProcess/API/gtk/WebKitWebViewBase.cpp
index 251a1fa..9fe945b 100644
--- a/Source/WebKit2/UIProcess/API/gtk/WebKitWebViewBase.cpp
+++ b/Source/WebKit2/UIProcess/API/gtk/WebKitWebViewBase.cpp
@@ -57,9 +57,12 @@
 #include <WebCore/NotImplemented.h>
 #include <WebCore/PasteboardHelper.h>
 #include <WebCore/RefPtrCairo.h>
-#include <WebCore/Region.h>
 #include <gdk/gdk.h>
+#include <WebCore/Region.h>
 #include <gdk/gdkkeysyms.h>
+#ifdef GDK_WINDOWING_WAYLAND
+#include <gdk/gdkwayland.h>
+#endif
 #ifdef GDK_WINDOWING_X11
 #include <gdk/gdkx.h>
 #endif
@@ -72,16 +75,21 @@
 #include "WebFullScreenManagerProxy.h"
 #endif
 
-#if USE(TEXTURE_MAPPER_GL) && defined(GDK_WINDOWING_X11)
+#if USE(TEXTURE_MAPPER_GL)
+#if defined(GDK_WINDOWING_X11)
 #include <WebCore/RedirectedXCompositeWindow.h>
 #endif
+#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
+#include <WebCore/WaylandCompositor.h>
+#endif
+#endif
 
 using namespace WebKit;
 using namespace WebCore;
 
 typedef HashMap<GtkWidget*, IntRect> WebKitWebViewChildrenMap;
 
-#if USE(TEXTURE_MAPPER_GL)
+#if USE(TEXTURE_MAPPER_GL) && defined(GDK_WINDOWING_X11)
 void redirectedWindowDamagedCallback(void* data);
 #endif
 
@@ -130,12 +138,37 @@ struct _WebKitWebViewBasePrivate {
 #endif
 
 #if USE(TEXTURE_MAPPER_GL)
+#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
+    WaylandCompositor* waylandCompositor;
+#endif
+#if defined(GDK_WINDOWING_X11)
     OwnPtr<RedirectedXCompositeWindow> redirectedWindow;
 #endif
+#endif
+};
+
+enum DisplayType {
+  DISPLAY_TYPE_NONE = 0,
+  DISPLAY_TYPE_X11,
+  DISPLAY_TYPE_WAYLAND
 };
 
 WEBKIT_DEFINE_TYPE(WebKitWebViewBase, webkit_web_view_base, GTK_TYPE_CONTAINER)
 
+static DisplayType getDisplayType()
+{
+    GdkDisplay* display = gdk_display_manager_get_default_display(gdk_display_manager_get());
+#if defined(GDK_WINDOWING_WAYLAND)
+    if (GDK_IS_WAYLAND_DISPLAY(display))
+        return DISPLAY_TYPE_WAYLAND;
+#endif
+#if defined(GDK_WINDOWING_X11)
+    if (GDK_IS_X11_DISPLAY(display))
+        return DISPLAY_TYPE_X11;
+#endif
+    return DISPLAY_TYPE_NONE;
+}
+
 static void webkitWebViewBaseNotifyResizerSize(WebKitWebViewBase* webViewBase)
 {
     WebKitWebViewBasePrivate* priv = webViewBase->priv;
@@ -394,13 +427,20 @@ static void webkitWebViewBaseConstructed(GObject* object)
     WebKitWebViewBasePrivate* priv = WEBKIT_WEB_VIEW_BASE(object)->priv;
     priv->pageClient = PageClientImpl::create(viewWidget);
     priv->dragAndDropHelper.setWidget(viewWidget);
-
-#if USE(TEXTURE_MAPPER_GL) && defined(GDK_WINDOWING_X11)
-    GdkDisplay* display = gdk_display_manager_get_default_display(gdk_display_manager_get());
-    if (GDK_IS_X11_DISPLAY(display)) {
+#if USE(TEXTURE_MAPPER_GL)
+    DisplayType displayType = getDisplayType();
+    if (displayType == DISPLAY_TYPE_WAYLAND) {
+#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
+        priv->waylandCompositor = WaylandCompositor::instance();
+        if (priv->waylandCompositor)
+            priv->waylandCompositor->addWidget(viewWidget);
+#endif
+    } else if (displayType = DISPLAY_TYPE_X11) {
+#if defined(GDK_WINDOWING_X11)
         priv->redirectedWindow = RedirectedXCompositeWindow::create(IntSize(1, 1), RedirectedXCompositeWindow::DoNotCreateGLContext);
         if (priv->redirectedWindow)
             priv->redirectedWindow->setDamageNotifyCallback(redirectedWindowDamagedCallback, object);
+#endif
     }
 #endif
 
@@ -415,14 +455,35 @@ static bool webkitWebViewRenderAcceleratedCompositingResults(WebKitWebViewBase*
 
     // To avoid flashes when initializing accelerated compositing for the first
     // time, we wait until we know there's a frame ready before rendering.
+    cairo_surface_t* surface = NULL;
     WebKitWebViewBasePrivate* priv = webViewBase->priv;
-    if (!priv->redirectedWindow)
-        return false;
+    DisplayType displayType = getDisplayType();
+    if (displayType == DISPLAY_TYPE_WAYLAND) {
+#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
+        if (!priv->waylandCompositor)
+            return false;
+        surface = priv->waylandCompositor->cairoSurfaceForWidget(GTK_WIDGET(webViewBase));
+#endif
+    } else if (displayType == DISPLAY_TYPE_X11) {
+#if defined(GDK_WINDOWING_X11)
+        if (!priv->redirectedWindow)
+            return false;
+        surface = priv->redirectedWindow->cairoSurfaceForWidget(GTK_WIDGET(webViewBase));
+#endif
+    }
+
+    if (surface) {
+        cairo_rectangle(cr, clipRect->x, clipRect->y, clipRect->width, clipRect->height);
+        cairo_set_source_surface(cr, surface, 0, 0);
+        cairo_fill(cr);
+    }
+
+#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
+    if (displayType == DISPLAY_TYPE_WAYLAND) {
+        priv->waylandCompositor->nextFrame();
+    }
+#endif
 
-    cairo_rectangle(cr, clipRect->x, clipRect->y, clipRect->width, clipRect->height);
-    cairo_surface_t* surface = priv->redirectedWindow->cairoSurfaceForWidget(GTK_WIDGET(webViewBase));
-    cairo_set_source_surface(cr, surface, 0, 0);
-    cairo_fill(cr);
     return true;
 }
 #endif
@@ -505,7 +566,7 @@ static void resizeWebKitWebViewBaseFromAllocation(WebKitWebViewBase* webViewBase
         gtk_widget_size_allocate(priv->authenticationDialog, &childAllocation);
     }
 
-#if USE(TEXTURE_MAPPER_GL)
+#if USE(TEXTURE_MAPPER_GL) && defined(GDK_WINDOWING_X11)
     if (sizeChanged && webViewBase->priv->redirectedWindow)
         webViewBase->priv->redirectedWindow->resize(viewRect.size());
 #endif
@@ -920,9 +981,15 @@ void webkitWebViewBaseUpdatePreferences(WebKitWebViewBase* webkitWebViewBase)
     WebKitWebViewBasePrivate* priv = webkitWebViewBase->priv;
 
 #if USE(TEXTURE_MAPPER_GL)
+#if defined(GDK_WINDOWING_X11)
     if (priv->redirectedWindow)
         return;
 #endif
+#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
+    if (priv->waylandCompositor)
+        return;
+#endif
+#endif
 
     priv->pageProxy->pageGroup().preferences()->setAcceleratedCompositingEnabled(false);
 }
@@ -934,7 +1001,7 @@ void webkitWebViewBaseCreateWebPage(WebKitWebViewBase* webkitWebViewBase, WebCon
     priv->pageProxy = context->createWebPage(*priv->pageClient, pageGroup);
     priv->pageProxy->initializeWebPage();
 
-#if USE(TEXTURE_MAPPER_GL)
+#if USE(TEXTURE_MAPPER_GL) && defined(GDK_WINDOWING_X11)
     if (priv->redirectedWindow)
         priv->pageProxy->setAcceleratedCompositingWindowId(priv->redirectedWindow->windowId());
 #endif
@@ -1070,7 +1137,7 @@ GdkEvent* webkitWebViewBaseTakeContextMenuEvent(WebKitWebViewBase* webkitWebView
     return webkitWebViewBase->priv->contextMenuEvent.release();
 }
 
-#if USE(TEXTURE_MAPPER_GL)
+#if USE(TEXTURE_MAPPER_GL) && defined(GDK_WINDOWING_X11)
 void redirectedWindowDamagedCallback(void* data)
 {
     gtk_widget_queue_draw(GTK_WIDGET(data));
-- 
1.8.3.2

