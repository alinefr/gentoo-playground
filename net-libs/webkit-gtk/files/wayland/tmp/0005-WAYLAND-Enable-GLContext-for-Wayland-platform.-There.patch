From 03250f14679a3c9c60c87345672fad73e0e2d36f Mon Sep 17 00:00:00 2001
From: Iago Toral Quiroga <itoral@igalia.com>
Date: Thu, 23 Jan 2014 11:02:07 +0100
Subject: [PATCH 05/10] [WAYLAND] Enable GLContext for Wayland platform. There
 is a type clash between EGL platforms when enabling X11 and Wayland platforms
 so for now, if both platforms are enabled, we force GLX for X11 to avoid the
 EGL path (since Wayland would be the target EGL platform)

---
 Source/WebCore/platform/graphics/GLContext.cpp     | 27 ++++++++--------------
 Source/WebCore/platform/graphics/GLContext.h       |  8 +++++++
 .../WebCore/platform/graphics/egl/GLContextEGL.cpp |  9 +++++---
 .../platform/gtk/RedirectedXCompositeWindow.cpp    | 10 ++++++++
 .../WebProcess/WebPage/gtk/LayerTreeHostGtk.cpp    | 15 ++++++++++++
 5 files changed, 49 insertions(+), 20 deletions(-)

diff --git a/Source/WebCore/platform/graphics/GLContext.cpp b/Source/WebCore/platform/graphics/GLContext.cpp
index 0ede7ff..b3ce1c0 100644
--- a/Source/WebCore/platform/graphics/GLContext.cpp
+++ b/Source/WebCore/platform/graphics/GLContext.cpp
@@ -35,13 +35,9 @@
 #include <X11/Xlib.h>
 #endif
 
-#if PLATFORM(GTK)
-#include <gdk/gdk.h>
-#ifndef GTK_API_VERSION_2
-#ifdef GDK_WINDOWING_WAYLAND
+#if USE(EGL) && PLATFORM(WAYLAND) && PLATFORM(GTK) && !defined(GTK_API_VERSION_2)
 #include <gdk/gdkwayland.h>
-#endif
-#endif
+#include "WaylandDisplay.h"
 #endif
 
 using WTF::ThreadSpecific;
@@ -74,6 +70,13 @@ GLContext* GLContext::sharingContext()
     return sharing.get();
 }
 
+#if USE(EGL) && PLATFORM(WAYLAND) && PLATFORM(GTK) && !defined(GTK_API_VERSION_2)
+struct wl_display* GLContext::sharedWaylandDisplay()
+{
+    return WaylandDisplay::instance()->nativeDisplay();
+}
+#endif
+
 #if PLATFORM(X11)
 // We do not want to call glXMakeContextCurrent using different Display pointers,
 // because it might lead to crashes in some drivers (fglrx). We use a shared display
@@ -146,18 +149,8 @@ void GLContext::cleanupActiveContextsAtExit()
 
 PassOwnPtr<GLContext> GLContext::createContextForWindow(GLNativeWindowType windowHandle, GLContext* sharingContext)
 {
-#if PLATFORM(GTK) && defined(GDK_WINDOWING_WAYLAND) && USE(EGL)
-    GdkDisplay* display = gdk_display_manager_get_default_display(gdk_display_manager_get());
-
-    if (GDK_IS_WAYLAND_DISPLAY(display)) {
-        if (OwnPtr<GLContext> eglContext = GLContextEGL::createContext(windowHandle, sharingContext))
-            return eglContext.release();
-        return nullptr;
-    }
-#endif
-
 #if !PLATFORM(NIX)
-#if USE(GLX)
+#if USE(GLX) && !PLATFORM(WAYLAND)
     if (OwnPtr<GLContext> glxContext = GLContextGLX::createContext(windowHandle, sharingContext))
         return glxContext.release();
 #endif
diff --git a/Source/WebCore/platform/graphics/GLContext.h b/Source/WebCore/platform/graphics/GLContext.h
index 4e9d39e..97cc327 100644
--- a/Source/WebCore/platform/graphics/GLContext.h
+++ b/Source/WebCore/platform/graphics/GLContext.h
@@ -28,6 +28,10 @@
 #if USE(EGL) && !PLATFORM(GTK) && !PLATFORM(NIX)
 #include "eglplatform.h"
 typedef EGLNativeWindowType GLNativeWindowType;
+#elif USE(EGL) && PLATFORM(GTK) && PLATFORM(WAYLAND) && !defined(GTK_API_VERSION_2)
+#include <wayland-egl.h>
+#include <EGL/eglplatform.h>
+typedef EGLNativeWindowType GLNativeWindowType;
 #else
 typedef uint64_t GLNativeWindowType;
 #endif
@@ -67,6 +71,10 @@ public:
     static void cleanupSharedX11Display();
 #endif
 
+#if USE(EGL) && PLATFORM(GTK) && PLATFORM(WAYLAND) && !defined(GTK_API_VERSION_2)
+    static struct wl_display* sharedWaylandDisplay();
+#endif
+
     static void addActiveContext(GLContext*);
     static void removeActiveContext(GLContext*);
     static void cleanupActiveContextsAtExit();
diff --git a/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp b/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp
index 09a7ed8..757a60d 100644
--- a/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp
+++ b/Source/WebCore/platform/graphics/egl/GLContextEGL.cpp
@@ -54,7 +54,9 @@ static EGLDisplay sharedEGLDisplay()
     static bool initialized = false;
     if (!initialized) {
         initialized = true;
-#if PLATFORM(X11)
+#if PLATFORM(GTK) && PLATFORM(WAYLAND) && !defined(GTK_API_VERSION_2)
+        gSharedEGLDisplay = eglGetDisplay(GLContext::sharedWaylandDisplay());
+#elif PLATFORM(X11)
         gSharedEGLDisplay = eglGetDisplay(GLContext::sharedX11Display());
 #else
         gSharedEGLDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);
@@ -124,7 +126,6 @@ PassOwnPtr<GLContextEGL> GLContextEGL::createWindowContext(EGLNativeWindowType w
     EGLSurface surface = eglCreateWindowSurface(display, config, window, 0);
     if (surface == EGL_NO_SURFACE)
         return nullptr;
-
     return adoptPtr(new GLContextEGL(context, surface, WindowSurface));
 }
 
@@ -154,7 +155,9 @@ PassOwnPtr<GLContextEGL> GLContextEGL::createPbufferContext(EGLContext sharingCo
 
 PassOwnPtr<GLContextEGL> GLContextEGL::createPixmapContext(EGLContext sharingContext)
 {
-#if PLATFORM(X11)
+#if PLATFORM(GTK) && PLATFORM(WAYLAND) && !defined(GTK_API_VERSION_2)
+    return nullptr;
+#elif PLATFORM(X11)
     EGLDisplay display = sharedEGLDisplay();
     if (display == EGL_NO_DISPLAY)
         return nullptr;
diff --git a/Source/WebCore/platform/gtk/RedirectedXCompositeWindow.cpp b/Source/WebCore/platform/gtk/RedirectedXCompositeWindow.cpp
index c8e81e4..9adecb6 100644
--- a/Source/WebCore/platform/gtk/RedirectedXCompositeWindow.cpp
+++ b/Source/WebCore/platform/gtk/RedirectedXCompositeWindow.cpp
@@ -37,6 +37,10 @@
 #include <gtk/gtk.h>
 #include <wtf/HashMap.h>
 
+#if USE(GLX)
+#include "GLContextGLX.h"
+#endif
+
 namespace WebCore {
 
 typedef HashMap<Window, RedirectedXCompositeWindow*> WindowHashMap;
@@ -199,7 +203,13 @@ GLContext* RedirectedXCompositeWindow::context()
         return m_context.get();
 
     ASSERT(m_window);
+#if !PLATFORM(WAYLAND)
     m_context = GLContext::createContextForWindow(m_window, GLContext::sharingContext());
+#elif USE(GLX)
+    m_context = GLContextGLX::createContext(m_window, GLContext::sharingContext());
+#else
+    return 0;
+#endif
     return m_context.get();
 }
 
diff --git a/Source/WebKit2/WebProcess/WebPage/gtk/LayerTreeHostGtk.cpp b/Source/WebKit2/WebProcess/WebPage/gtk/LayerTreeHostGtk.cpp
index 70f6c83..71b9e18 100644
--- a/Source/WebKit2/WebProcess/WebPage/gtk/LayerTreeHostGtk.cpp
+++ b/Source/WebKit2/WebProcess/WebPage/gtk/LayerTreeHostGtk.cpp
@@ -57,6 +57,10 @@
 #include <gdk/gdkx.h>
 #endif
 
+#if USE(GLX)
+#include "GLContextGLX.h"
+#endif
+
 using namespace WebCore;
 
 namespace WebKit {
@@ -83,12 +87,23 @@ GLContext* LayerTreeHostGtk::glContext()
     if (m_context)
         return m_context.get();
 
+#if !PLATFORM(WAYLAND)
     uint64_t windowHandle = m_webPage->nativeWindowHandle();
     if (!windowHandle)
         return 0;
 
     m_context = GLContext::createContextForWindow(windowHandle, GLContext::sharingContext());
     return m_context.get();
+#elif USE(GLX)
+    uint64_t windowHandle = m_webPage->nativeWindowHandle();
+    if (!windowHandle)
+        return 0;
+
+    m_context = GLContextGLX::createContext(windowHandle, GLContext::sharingContext());
+    return m_context.get();
+#else
+    return 0;
+#endif
 }
 
 void LayerTreeHostGtk::initialize()
-- 
1.8.3.2

