From 8b9d589314632173ebe050e8f94a8031f68c2a32 Mon Sep 17 00:00:00 2001
From: Iago Toral Quiroga <itoral@igalia.com>
Date: Fri, 24 Jan 2014 09:35:24 +0100
Subject: [PATCH 08/10] [WAYLAND] Have LayerTreeHostGTK select between
 Wayland/X11 at run-time. Also, remove unnecessary GTK_API_VERSION_2 guards.

---
 Source/WebCore/platform/gtk/WaylandCompositor.cpp  |   2 +-
 Source/WebCore/platform/gtk/WaylandCompositor.h    |   2 +-
 Source/WebCore/platform/gtk/WaylandDisplay.cpp     |   2 +-
 Source/WebCore/platform/gtk/WaylandDisplay.h       |   2 +-
 .../platform/gtk/WaylandDisplayEventSource.cpp     |   2 +-
 .../platform/gtk/WaylandDisplayEventSource.h       |   2 +-
 Source/WebCore/platform/gtk/WaylandSurface.cpp     |   2 +-
 Source/WebCore/platform/gtk/WaylandSurface.h       |   2 +-
 .../WebProcess/WebPage/gtk/LayerTreeHostGtk.cpp    | 102 ++++++++++++++-------
 .../WebProcess/WebPage/gtk/LayerTreeHostGtk.h      |   7 +-
 10 files changed, 80 insertions(+), 45 deletions(-)

diff --git a/Source/WebCore/platform/gtk/WaylandCompositor.cpp b/Source/WebCore/platform/gtk/WaylandCompositor.cpp
index 2ccdc5d..3e8bf2f 100644
--- a/Source/WebCore/platform/gtk/WaylandCompositor.cpp
+++ b/Source/WebCore/platform/gtk/WaylandCompositor.cpp
@@ -27,7 +27,7 @@
 #include "config.h"
 #include "WaylandCompositor.h"
 
-#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
+#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND)
 
 #include "WaylandDisplayEventSource.h"
 
diff --git a/Source/WebCore/platform/gtk/WaylandCompositor.h b/Source/WebCore/platform/gtk/WaylandCompositor.h
index 3377492..a3583b2 100644
--- a/Source/WebCore/platform/gtk/WaylandCompositor.h
+++ b/Source/WebCore/platform/gtk/WaylandCompositor.h
@@ -29,7 +29,7 @@
 
 #include <gtk/gtk.h>
 
-#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
+#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND)
 
 #include <wayland-client.h>
 #include <wayland-server.h>
diff --git a/Source/WebCore/platform/gtk/WaylandDisplay.cpp b/Source/WebCore/platform/gtk/WaylandDisplay.cpp
index 71846f0..e5729c0 100644
--- a/Source/WebCore/platform/gtk/WaylandDisplay.cpp
+++ b/Source/WebCore/platform/gtk/WaylandDisplay.cpp
@@ -27,7 +27,7 @@
 #include "config.h"
 #include "WaylandDisplay.h"
 
-#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
+#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND)
 
 #include <wtf/OwnPtr.h>
 
diff --git a/Source/WebCore/platform/gtk/WaylandDisplay.h b/Source/WebCore/platform/gtk/WaylandDisplay.h
index 9792046..0bdccce 100644
--- a/Source/WebCore/platform/gtk/WaylandDisplay.h
+++ b/Source/WebCore/platform/gtk/WaylandDisplay.h
@@ -29,7 +29,7 @@
 
 #include <gdk/gdk.h>
 
-#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
+#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND)
 
 #include <wtf/PassOwnPtr.h>
 
diff --git a/Source/WebCore/platform/gtk/WaylandDisplayEventSource.cpp b/Source/WebCore/platform/gtk/WaylandDisplayEventSource.cpp
index 7ba41de..433d827 100644
--- a/Source/WebCore/platform/gtk/WaylandDisplayEventSource.cpp
+++ b/Source/WebCore/platform/gtk/WaylandDisplayEventSource.cpp
@@ -27,7 +27,7 @@
 #include "config.h"
 #include "WaylandDisplayEventSource.h"
 
-#if PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
+#if PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND)
 
 #include <wayland-server.h>
 
diff --git a/Source/WebCore/platform/gtk/WaylandDisplayEventSource.h b/Source/WebCore/platform/gtk/WaylandDisplayEventSource.h
index d807b27..328d473 100644
--- a/Source/WebCore/platform/gtk/WaylandDisplayEventSource.h
+++ b/Source/WebCore/platform/gtk/WaylandDisplayEventSource.h
@@ -29,7 +29,7 @@
 
 #include <gdk/gdk.h>
 
-#if PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
+#if PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND)
 
 #include <wayland-client.h>
 
diff --git a/Source/WebCore/platform/gtk/WaylandSurface.cpp b/Source/WebCore/platform/gtk/WaylandSurface.cpp
index 98c1e63..dc89f8b 100644
--- a/Source/WebCore/platform/gtk/WaylandSurface.cpp
+++ b/Source/WebCore/platform/gtk/WaylandSurface.cpp
@@ -27,7 +27,7 @@
 #include "config.h"
 #include "WaylandSurface.h"
 
-#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
+#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND)
 
 #include "WaylandDisplay.h"
 
diff --git a/Source/WebCore/platform/gtk/WaylandSurface.h b/Source/WebCore/platform/gtk/WaylandSurface.h
index 2b22d73..653b21e 100644
--- a/Source/WebCore/platform/gtk/WaylandSurface.h
+++ b/Source/WebCore/platform/gtk/WaylandSurface.h
@@ -29,7 +29,7 @@
 
 #include <gdk/gdk.h>
 
-#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
+#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND)
 
 #include <wtf/PassOwnPtr.h>
 
diff --git a/Source/WebKit2/WebProcess/WebPage/gtk/LayerTreeHostGtk.cpp b/Source/WebKit2/WebProcess/WebPage/gtk/LayerTreeHostGtk.cpp
index c6bde1b..56a1864 100644
--- a/Source/WebKit2/WebProcess/WebPage/gtk/LayerTreeHostGtk.cpp
+++ b/Source/WebKit2/WebProcess/WebPage/gtk/LayerTreeHostGtk.cpp
@@ -49,10 +49,12 @@
 #include <wtf/CurrentTime.h>
 
 #include <gdk/gdk.h>
-
-#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
+#if defined(GDK_WINDOWING_WAYLAND)
+#include <gdk/gdkwayland.h>
+#if USE(EGL) && PLATFORM(WAYLAND)
 #include "WaylandDisplay.h"
 #endif
+#endif
 
 #if defined(GDK_WINDOWING_X11)
 #define Region XRegion
@@ -70,6 +72,12 @@ using namespace WebCore;
 
 namespace WebKit {
 
+enum {
+  DISPLAY_TYPE_NONE = 0,
+  DISPLAY_TYPE_X11,
+  DISPLAY_TYPE_WAYLAND
+};
+
 PassRefPtr<LayerTreeHostGtk> LayerTreeHostGtk::create(WebPage* webPage)
 {
     RefPtr<LayerTreeHostGtk> host = adoptRef(new LayerTreeHostGtk(webPage));
@@ -84,7 +92,22 @@ LayerTreeHostGtk::LayerTreeHostGtk(WebPage* webPage)
     , m_lastFlushTime(0)
     , m_layerFlushSchedulingEnabled(true)
     , m_layerFlushTimerCallbackId(0)
+    , m_displayType(getDisplayType())
+{
+}
+
+int LayerTreeHostGtk::getDisplayType()
 {
+    GdkDisplay* display = gdk_display_manager_get_default_display(gdk_display_manager_get());
+#if defined(GDK_WINDOWING_WAYLAND)
+    if (GDK_IS_WAYLAND_DISPLAY(display))
+        return DISPLAY_TYPE_WAYLAND;
+#endif
+#if defined(GDK_WINDOWING_X11)
+    if (GDK_IS_X11_DISPLAY(display))
+        return DISPLAY_TYPE_X11;
+#endif
+    return DISPLAY_TYPE_NONE;
 }
 
 GLContext* LayerTreeHostGtk::glContext()
@@ -92,23 +115,27 @@ GLContext* LayerTreeHostGtk::glContext()
     if (m_context)
         return m_context.get();
 
-#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
-    EGLNativeWindowType windowHandle = m_wlSurface ? m_wlSurface->nativeWindowHandle() : 0;
-#else
-    uint64_t windowHandle = m_webPage->nativeWindowHandle();
+    if (m_displayType == DISPLAY_TYPE_WAYLAND) {
+#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND)
+        EGLNativeWindowType windowHandle = m_wlSurface ? m_wlSurface->nativeWindowHandle() : 0;
+        if (!windowHandle)
+            return 0;
+        m_context = GLContext::createContextForWindow(windowHandle, GLContext::sharingContext());
+        return m_context.get();
 #endif
-    if (!windowHandle)
-        return 0;
-
-#if !PLATFORM(WAYLAND) || (USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2))
-    m_context = GLContext::createContextForWindow(windowHandle, GLContext::sharingContext());
-    return m_context.get();
+    } else {
+        uint64_t windowHandle = m_webPage->nativeWindowHandle();
+        if (!windowHandle)
+            return 0;
+#if !PLATFORM(WAYLAND) // If we are building for both X11 and Wayland we need to force GLX for X11
+        m_context = GLContext::createContextForWindow(windowHandle, GLContext::sharingContext());
+        return m_context.get();
 #elif USE(GLX)
-    m_context = GLContextGLX::createContext(windowHandle, GLContext::sharingContext());
-    return m_context.get();
-#else
-    return 0;
+        m_context = GLContextGLX::createContext(windowHandle, GLContext::sharingContext());
+        return m_context.get();
 #endif
+    }
+    return 0;
 }
 
 void LayerTreeHostGtk::initialize()
@@ -133,23 +160,24 @@ void LayerTreeHostGtk::initialize()
     m_rootLayer->addChild(m_nonCompositedContentLayer.get());
     m_nonCompositedContentLayer->setNeedsDisplay();
 
-#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
-    // Request a wayland surface from the nested wayland compositor
-    WaylandDisplay* display = WaylandDisplay::instance();
-    m_wlSurface = display->createSurface(1, 1);
-    if (!m_wlSurface)
-        return;
+    if (m_displayType == DISPLAY_TYPE_WAYLAND) {
+#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND)
+        // Request a wayland surface from the nested wayland compositor
+        WaylandDisplay* display = WaylandDisplay::instance();
+        m_wlSurface = display->createSurface(1, 1);
+        if (!m_wlSurface)
+            return;
 
-    // Resize the surface to match the size of the web page
-    IntSize webPageSize = m_webPage->size();
-    wl_egl_window_resize(m_wlSurface->nativeWindowHandle(), webPageSize.width(), webPageSize.height(), 0, 0);
+        // Resize the surface to match the size of the web page
+        IntSize webPageSize = m_webPage->size();
+        wl_egl_window_resize(m_wlSurface->nativeWindowHandle(), webPageSize.width(), webPageSize.height(), 0, 0);
 
-    // FIXME: We need a non-zero window handle so that webkit realizes we are good to go for AC.
-    // We can probably find a more elegant way to do this for Wayland
-    m_layerTreeContext.windowHandle = m_wlSurface->nativeWindowHandle() ? 1 : 0;
-#else
-    m_layerTreeContext.windowHandle = m_webPage->nativeWindowHandle();
+        // FIXME: We need a non-zero window handle so that webkit realizes we are good to go for AC.
+        // We can probably find a more elegant way to do this for Wayland
+        m_layerTreeContext.windowHandle = m_wlSurface->nativeWindowHandle() ? 1 : 0;
 #endif
+    } else
+        m_layerTreeContext.windowHandle = m_webPage->nativeWindowHandle();
 
     GLContext* context = glContext();
     if (!context)
@@ -246,9 +274,11 @@ void LayerTreeHostGtk::sizeDidChange(const IntSize& newSize)
         return;
     m_rootLayer->setSize(newSize);
 
-#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
-    wl_egl_window_resize(m_wlSurface->nativeWindowHandle(), newSize.width(), newSize.height(), 0, 0);
+    if (m_displayType == DISPLAY_TYPE_WAYLAND) {
+#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND)
+        wl_egl_window_resize(m_wlSurface->nativeWindowHandle(), newSize.width(), newSize.height(), 0, 0);
 #endif
+    }
 
     // If the newSize exposes new areas of the non-composited content a setNeedsDisplay is needed
     // for those newly exposed areas.
@@ -335,10 +365,12 @@ gboolean LayerTreeHostGtk::layerFlushTimerFiredCallback(LayerTreeHostGtk* layerT
 
 void LayerTreeHostGtk::queueLayerFlush(unsigned interval)
 {
-#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
-    // Let the compositor know that we want to render a new frame
-    m_wlSurface->requestFrame();
+    if (m_displayType == DISPLAY_TYPE_WAYLAND) {
+#if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND)
+        // Let the compositor know that we want to render a new frame
+        m_wlSurface->requestFrame();
 #endif
+    }
     m_layerFlushTimerCallbackId = g_timeout_add_full(GDK_PRIORITY_EVENTS, interval, reinterpret_cast<GSourceFunc>(layerFlushTimerFiredCallback), this, 0);
     g_source_set_name_by_id(m_layerFlushTimerCallbackId, "[WebKit] layerFlushTimerFiredCallback");
 }
diff --git a/Source/WebKit2/WebProcess/WebPage/gtk/LayerTreeHostGtk.h b/Source/WebKit2/WebProcess/WebPage/gtk/LayerTreeHostGtk.h
index 41b0fdf..688399d 100644
--- a/Source/WebKit2/WebProcess/WebPage/gtk/LayerTreeHostGtk.h
+++ b/Source/WebKit2/WebProcess/WebPage/gtk/LayerTreeHostGtk.h
@@ -36,7 +36,7 @@
 #include <WebCore/GraphicsLayerClient.h>
 
 #include <gdk/gdk.h>
-#if PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
+#if PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND)
 #include <WebCore/WaylandSurface.h>
 #endif
 
@@ -103,6 +103,8 @@ private:
 
     WebCore::GLContext* glContext();
 
+    int getDisplayType();
+
     LayerTreeContext m_layerTreeContext;
     bool m_isValid;
     bool m_notifyAfterScheduledLayerFlush;
@@ -115,8 +117,9 @@ private:
     double m_lastFlushTime;
     bool m_layerFlushSchedulingEnabled;
     unsigned m_layerFlushTimerCallbackId;
+    int m_displayType;
 
-#if PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND) && !defined(GTK_API_VERSION_2)
+#if PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND)
     OwnPtr<WebCore::WaylandSurface> m_wlSurface;
 #endif
 };
-- 
1.8.3.2

