--- src/output/PulseOutputPlugin.cxx.orig	2014-10-13 07:36:49.610470417 +0100
+++ src/output/PulseOutputPlugin.cxx	2014-10-13 09:23:43.880412290 +0100
@@ -549,12 +549,145 @@
 	return true;
 }
 
+static pa_sample_format_t
+get_bitformat(SampleFormat sample_format)
+{
+	switch (sample_format) {
+	case SampleFormat::UNDEFINED:
+	case SampleFormat::DSD:
+	case SampleFormat::S8:
+		return PA_SAMPLE_INVALID;
+
+	case SampleFormat::S16:
+		return PA_SAMPLE_S16NE;
+
+	case SampleFormat::S24_P32:
+		return PA_SAMPLE_S24NE;
+
+	case SampleFormat::S32:
+		return PA_SAMPLE_S32NE;
+
+	case SampleFormat::FLOAT:
+		return PA_SAMPLE_FLOAT32NE;
+	}
+
+	assert(false);
+	gcc_unreachable();
+}
+
+static pa_sample_format_t
+byteswap_bitformat(pa_sample_format_t fmt)
+{
+	switch(fmt) {
+	case PA_SAMPLE_S16LE: return PA_SAMPLE_S16BE;
+	case PA_SAMPLE_S24LE: return PA_SAMPLE_S24BE;
+	case PA_SAMPLE_S32LE: return PA_SAMPLE_S32BE;
+	case PA_SAMPLE_S16BE: return PA_SAMPLE_S16LE;
+	case PA_SAMPLE_S24BE: return PA_SAMPLE_S24LE;
+
+	case PA_SAMPLE_S24_32BE:
+		return PA_SAMPLE_S24_32LE;
+
+	case PA_SAMPLE_S24_32LE:
+		return PA_SAMPLE_S24_32BE;
+
+	case PA_SAMPLE_S32BE: return PA_SAMPLE_S32LE;
+
+	case PA_SAMPLE_FLOAT32BE:
+		return PA_SAMPLE_FLOAT32LE;
+
+	case PA_SAMPLE_FLOAT32LE:
+		return PA_SAMPLE_FLOAT32BE;
+
+	default: return PA_SAMPLE_INVALID;
+	}
+}
+
+static pa_sample_format_t
+pulse_to_packed_format(pa_sample_format_t fmt)
+{
+	switch (fmt) {
+	case PA_SAMPLE_S24LE:
+		return PA_SAMPLE_S24_32LE;
+
+	case PA_SAMPLE_S24BE:
+		return PA_SAMPLE_S24_32BE;
+
+	default:
+		return PA_SAMPLE_INVALID;
+	}
+}
+
+static bool
+pulse_try_format_or_packed(pa_sample_spec *ss, pa_sample_format_t fmt, bool *packed_r)
+{
+	int ret;
+	pa_sample_format_t default_fmt = ss->format;
+	ss->format = fmt;
+	if (!packed_r)
+	{
+		ret = pa_sample_spec_valid(ss);
+		if (ret != 0)
+		{
+			*packed_r = false;
+			return true;
+		}
+	}
+	fmt = pulse_to_packed_format(fmt);
+	if (fmt == PA_SAMPLE_INVALID)
+		return false;
+
+	ss->format = fmt;
+	ret = pa_sample_spec_valid(ss);
+	if (ret != 0)
+	{
+		*packed_r = true;
+		return true;
+	}
+	ss->format = default_fmt;
+	return false;
+}
+
+/**
+ * Attempts to configure the specified sample format, and tries the
+ * reversed host byte order if was not supported.
+ */
+static int
+pulse_get_valid_format(pa_sample_spec *ss,
+		       SampleFormat sample_format,
+		       bool *packed_r, bool *reverse_endian_r)
+{
+	pa_sample_format_t pulse_format = get_bitformat(sample_format);
+	if (pulse_format == PA_SAMPLE_INVALID)
+		return -EINVAL;
+
+	if (pulse_try_format_or_packed(ss, pulse_format,
+					    packed_r))
+	{
+		*reverse_endian_r = false;
+		return 0;
+	}	
+
+	pulse_format = byteswap_bitformat(pulse_format);
+	if (pulse_format == PA_SAMPLE_INVALID)
+		return -EINVAL;
+
+	if (pulse_try_format_or_packed(ss, pulse_format, packed_r))
+	{
+		*reverse_endian_r = true;
+		return 0;
+	}
+
+	return -EINVAL;
+}
+
 static bool
 pulse_output_open(struct audio_output *ao, AudioFormat &audio_format,
 		  Error &error)
 {
 	PulseOutput *po = (PulseOutput *)ao;
 	pa_sample_spec ss;
+	bool packed = true, reverse_endian;
 
 	assert(po->mainloop != nullptr);
 
@@ -584,14 +717,41 @@
 		return false;
 	}
 
-	/* MPD doesn't support the other pulseaudio sample formats, so
-	   we just force MPD to send us everything as 16 bit */
-	audio_format.format = SampleFormat::S16;
-
-	ss.format = PA_SAMPLE_S16NE;
+	/* Set params for pulse stream */
 	ss.rate = audio_format.sample_rate;
 	ss.channels = audio_format.channels;
 
+	/* There seems to be a bug in pulseaudio with non-packed 24bit
+	   so we force packed to true */
+	packed = true;
+
+	/* pulseaudio can validate a sample_spec before opening the stream */
+	int err = pulse_get_valid_format(&ss, audio_format.format,
+					 &packed, &reverse_endian);
+
+	/* if unsupported, try other formats */
+
+	static const SampleFormat probe_formats[] = {
+		SampleFormat::S24_P32,
+		SampleFormat::S32,
+		SampleFormat::S16,
+		SampleFormat::S8,
+		SampleFormat::UNDEFINED,
+	};
+
+	for (unsigned i = 0;
+	     err == -EINVAL && probe_formats[i] != SampleFormat::UNDEFINED;
+	     ++i) {
+		const SampleFormat mpd_format = probe_formats[i];
+		if (mpd_format == audio_format.format)
+			continue;
+
+		err = pulse_get_valid_format(&ss, mpd_format,
+					     &packed, &reverse_endian);
+		if (err == 0)
+			audio_format.format = mpd_format;
+	}
+
 	/* create a stream .. */
 
 	if (!pulse_output_setup_stream(po, &ss, error)) {
