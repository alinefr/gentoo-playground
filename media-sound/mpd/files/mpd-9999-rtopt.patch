diff -urN mpd-9999.orig/Makefile.am mpd-9999/Makefile.am
--- mpd-9999.orig/Makefile.am	2017-02-18 23:14:00.094270689 +0000
+++ mpd-9999/Makefile.am	2017-02-18 23:27:49.032371335 +0000
@@ -185,6 +185,10 @@
 	src/SongFilter.cxx src/SongFilter.hxx \
 	src/PlaylistFile.cxx src/PlaylistFile.hxx
 
+if ENABLE_RTOPT
+libmpd_a_SOURCES += src/rt_opt.hxx
+endif
+
 if ANDROID
 else
 libmpd_a_SOURCES += \
@@ -543,6 +547,11 @@
 
 ICU_LDADD = libicu.a $(ICU_LIBS)
 
+if ENABLE_RTOPT
+src_mpd_SOURCES += \
+	src/rt_opt.cxx
+endif
+
 # PCM library
 
 libpcm_a_SOURCES = \
diff -urN mpd-9999.orig/configure.ac mpd-9999/configure.ac
--- mpd-9999.orig/configure.ac	2017-02-18 23:14:00.097604109 +0000
+++ mpd-9999/configure.ac	2017-02-18 23:27:49.035704754 +0000
@@ -609,6 +609,12 @@
 	id3tag, id3tag, id3_file_open, [-lid3tag -lz], [],
 	[ID3 support using libid3tag], [libid3tag not found])
 
+dnl ----------------rtopt-------------
+AC_ARG_ENABLE(rtopt,
+	AS_HELP_STRING([--enable-rtopt], [enable realtime support]),,
+	[enable_rtopt=no])
+dnl ----------------rtopt-------------
+
 dnl ---------------------------------------------------------------------------
 dnl Autodiscovery
 dnl ---------------------------------------------------------------------------
@@ -760,6 +766,14 @@
 MPD_DEFINE_CONDITIONAL(enable_neighbor_plugins, ENABLE_NEIGHBOR_PLUGINS,
 	[neighbor discovery])
 
+dnl ---------------------------------- rtopt ---------------------------------
+
+if test x$enable_rtopt = xyes; then
+	AC_DEFINE([ENABLE_RTOPT], 1, [Define to enable realtime option support])
+fi
+
+AM_CONDITIONAL(ENABLE_RTOPT, test x$enable_rtopt = xyes)
+
 dnl ---------------------------------------------------------------------------
 dnl Archive Plugins
 dnl ---------------------------------------------------------------------------
@@ -1439,6 +1453,7 @@
 results(libmpdclient, [libmpdclient])
 results(inotify, [inotify])
 results(sqlite, [SQLite])
+results(rtopt, [rtopt])
 
 printf '\nMetadata support:\n\t'
 results(id3,[ID3])
diff -urN mpd-9999.orig/src/IOThread.cxx mpd-9999/src/IOThread.cxx
--- mpd-9999.orig/src/IOThread.cxx	2017-02-18 23:14:00.114271207 +0000
+++ mpd-9999/src/IOThread.cxx	2017-02-18 23:27:49.035704754 +0000
@@ -21,6 +21,10 @@
 #include "IOThread.hxx"
 #include "event/Thread.hxx"
 
+#ifdef ENABLE_RTOPT
+#include "rt_opt.hxx"
+#endif
+
 #include <assert.h>
 
 static EventThread *io_thread;
diff -urN mpd-9999.orig/src/Main.cxx mpd-9999/src/Main.cxx
--- mpd-9999.orig/src/Main.cxx	2017-02-18 23:14:00.117604626 +0000
+++ mpd-9999/src/Main.cxx	2017-02-18 23:27:49.035704754 +0000
@@ -61,6 +61,9 @@
 #include "unix/Daemon.hxx"
 #endif
 
+#ifdef ENABLE_RTOPT
+#include "rt_opt.hxx"
+#endif
 #ifdef ENABLE_DATABASE
 #include "db/update/Service.hxx"
 #include "db/Configured.hxx"
@@ -441,6 +444,11 @@
 
 	const auto config = LoadConfig();
 
+#ifdef ENABLE_RTOPT
+	rtopt_init();
+	rtopt_change_priority(RTOPT_MAIN_PRIORITY_NAME);
+#endif
+
 #ifdef ENABLE_DAEMON
 	glue_daemonize_init(&options);
 #endif
@@ -515,6 +523,9 @@
 #ifdef ENABLE_DATABASE
 	const bool create_db = InitDatabaseAndStorage();
 #endif
+#ifdef ENABLE_RTOPT
+	rtopt_memlock();
+#endif
 
 	glue_sticker_init();
 
diff -urN mpd-9999.orig/src/config/Block.cxx mpd-9999/src/config/Block.cxx
--- mpd-9999.orig/src/config/Block.cxx	2017-02-18 23:14:00.134271724 +0000
+++ mpd-9999/src/config/Block.cxx	2017-02-18 23:39:48.084297303 +0000
@@ -50,6 +50,17 @@
 	return (unsigned)value2;
 }
 
+unsigned long
+BlockParam::GetUnsignedLongValue() const
+{
+	char *endptr;
+	unsigned long value2 = strtoul(value.c_str(), &endptr, 0);
+	if (*endptr != 0)
+		FormatFatalError("Not a valid number in line %i", line);
+
+	return (unsigned)value2;
+}
+
 bool
 BlockParam::GetBoolValue() const
 {
@@ -128,6 +139,16 @@
 	return bp->GetUnsignedValue();
 }
 
+unsigned long
+ConfigBlock::GetBlockValue(const char *name, unsigned long default_value) const
+{
+	const BlockParam *bp = GetBlockParam(name);
+	if (bp == nullptr)
+		return default_value;
+
+	return bp->GetUnsignedLongValue();
+}
+
 gcc_pure
 bool
 ConfigBlock::GetBlockValue(const char *name, bool default_value) const
diff -urN mpd-9999.orig/src/config/Block.hxx mpd-9999/src/config/Block.hxx
--- mpd-9999.orig/src/config/Block.hxx	2017-02-18 23:14:00.134271724 +0000
+++ mpd-9999/src/config/Block.hxx	2017-02-18 23:39:48.084297303 +0000
@@ -51,6 +51,9 @@
 	unsigned GetUnsignedValue() const;
 
 	gcc_pure
+	unsigned long GetUnsignedLongValue() const;
+
+	gcc_pure
 	bool GetBoolValue() const;
 };
 
@@ -117,6 +120,9 @@
 			      const char *default_value=nullptr) const;
 
 	gcc_pure
+	size_t GetBlockValue(const char *name, size_t default_value) const;
+
+	gcc_pure
 	int GetBlockValue(const char *name, int default_value) const;
 
 	gcc_pure
diff -urN mpd-9999.orig/src/config/ConfigOption.hxx mpd-9999/src/config/ConfigOption.hxx
--- mpd-9999.orig/src/config/ConfigOption.hxx	2017-02-18 23:14:00.134271724 +0000
+++ mpd-9999/src/config/ConfigOption.hxx	2017-02-18 23:27:49.039038173 +0000
@@ -90,6 +90,7 @@
 	AUDIO_FILTER,
 	DATABASE,
 	NEIGHBORS,
+	RTOPT,
 	MAX
 };
 
diff -urN mpd-9999.orig/src/config/ConfigTemplates.cxx mpd-9999/src/config/ConfigTemplates.cxx
--- mpd-9999.orig/src/config/ConfigTemplates.cxx	2017-02-18 23:14:00.137605143 +0000
+++ mpd-9999/src/config/ConfigTemplates.cxx	2017-02-18 23:27:49.039038173 +0000
@@ -90,6 +90,7 @@
 	{ "filter", true },
 	{ "database" },
 	{ "neighbors", true },
+	{ "realtime_option", true },
 };
 
 static constexpr unsigned n_config_block_templates =
diff -urN mpd-9999.orig/src/db/update/Service.cxx mpd-9999/src/db/update/Service.cxx
--- mpd-9999.orig/src/db/update/Service.cxx	2017-02-18 23:14:00.147605402 +0000
+++ mpd-9999/src/db/update/Service.cxx	2017-02-18 23:27:49.039038173 +0000
@@ -30,6 +30,9 @@
 #include "Log.hxx"
 #include "thread/Thread.hxx"
 #include "thread/Util.hxx"
+#ifdef ENABLE_RTOPT
+#include "rt_opt.hxx"
+#endif
 
 #ifndef NDEBUG
 #include "event/Loop.hxx"
@@ -119,7 +122,11 @@
 	else
 		LogDebug(update_domain, "starting");
 
+#ifdef ENABLE_RTOPT
+	rtopt_change_priority(RTOPT_UPDATE_PRIORITY_NAME);
+#else
 	SetThreadIdlePriority();
+#endif
 
 	modified = walk->Walk(next.db->GetRoot(), next.path_utf8.c_str(),
 			      next.discard);
diff -urN mpd-9999.orig/src/decoder/DecoderThread.cxx mpd-9999/src/decoder/DecoderThread.cxx
--- mpd-9999.orig/src/decoder/DecoderThread.cxx	2017-02-18 23:14:00.147605402 +0000
+++ mpd-9999/src/decoder/DecoderThread.cxx	2017-02-18 23:29:21.128086001 +0000
@@ -41,6 +41,10 @@
 #include "tag/ApeReplayGain.hxx"
 #include "Log.hxx"
 
+#ifdef ENABLE_RTOPT
+#include "rt_opt.hxx"
+#endif
+
 #include <stdexcept>
 #include <functional>
 #include <memory>
@@ -121,7 +125,9 @@
 		FormatThreadName("decoder:%s", plugin.name);
 
 		plugin.StreamDecode(bridge, input_stream);
-
+#ifdef ENABLE_RTOPT
+		rtopt_change_priority(RTOPT_DECODER_PRIORITY_NAME);
+#endif
 		SetThreadName("decoder");
 	}
 
diff -urN mpd-9999.orig/src/event/Thread.cxx mpd-9999/src/event/Thread.cxx
--- mpd-9999.orig/src/event/Thread.cxx	2017-02-18 23:14:00.164272499 +0000
+++ mpd-9999/src/event/Thread.cxx	2017-02-18 23:37:05.906770520 +0000
@@ -20,6 +20,9 @@
 #include "config.h"
 #include "Thread.hxx"
 #include "thread/Name.hxx"
+#ifdef ENABLE_RTOPT
+#include "rt_opt.hxx"
+#endif
 
 void
 EventThread::Start()
@@ -42,6 +45,8 @@
 EventThread::Run()
 {
 	SetThreadName("io");
-
+#ifdef ENABLE_RTOPT
+	rtopt_change_priority(RTOPT_IO_PRIORITY_NAME);
+#endif
 	event_loop.Run();
 }
diff -urN mpd-9999.orig/src/output/OutputThread.cxx mpd-9999/src/output/OutputThread.cxx
--- mpd-9999.orig/src/output/OutputThread.cxx	2017-02-18 23:14:00.200940114 +0000
+++ mpd-9999/src/output/OutputThread.cxx	2017-02-18 23:27:49.042371593 +0000
@@ -40,6 +40,9 @@
 #include "util/RuntimeError.hxx"
 #include "Log.hxx"
 #include "Compiler.h"
+#ifdef ENABLE_RTOPT
+#include "rt_opt.hxx"
+#endif
 
 #include <stdexcept>
 
@@ -404,13 +407,21 @@
 	FormatThreadName("output:%s", name);
 
 	try {
+#ifdef ENABLE_RTOPT
+		rtopt_change_output_priority(name);
+#else
 		SetThreadRealtime();
+#endif
 	} catch (const std::runtime_error &e) {
 		LogError(e,
 			 "OutputThread could not get realtime scheduling, continuing anyway");
 	}
 
+#ifdef ENABLE_RTOPT
+	rtopt_change_output_timerslack(name);
+#else
 	SetThreadTimerSlackUS(100);
+#endif
 
 	const std::lock_guard<Mutex> lock(mutex);
 
diff -urN mpd-9999.orig/src/player/Thread.cxx mpd-9999/src/player/Thread.cxx
--- mpd-9999.orig/src/player/Thread.cxx	2017-02-18 23:14:00.214273792 +0000
+++ mpd-9999/src/player/Thread.cxx	2017-02-18 23:30:22.533007090 +0000
@@ -38,6 +38,10 @@
 
 #include <stdexcept>
 
+#ifdef ENABLE_RTOPT
+#include "rt_opt.hxx"
+#endif
+
 #include <string.h>
 
 static constexpr Domain player_domain("player");
@@ -1140,7 +1144,9 @@
 PlayerControl::RunThread()
 {
 	SetThreadName("player");
-
+#ifdef ENABLE_RTOPT
+	rtopt_change_priority(RTOPT_PLAYER_PRIORITY_NAME);
+#endif
 	DecoderControl dc(mutex, cond,
 			  configured_audio_format,
 			  replay_gain_config);
diff -urN mpd-9999.orig/src/rt_opt.cxx mpd-9999/src/rt_opt.cxx
--- mpd-9999.orig/src/rt_opt.cxx	1970-01-01 01:00:00.000000000 +0100
+++ mpd-9999/src/rt_opt.cxx	2017-02-18 23:39:48.080963883 +0000
@@ -0,0 +1,508 @@
+/*
+ * Copyright (C) 2003-2010 The Music Player Daemon Project
+ * http://www.musicpd.org
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#include "config.h"
+#include "config/ConfigOption.hxx"
+
+#include "system/FatalError.hxx"
+#include "Log.hxx"
+#include "util/Domain.hxx"
+
+
+#include "config/Block.hxx"
+#include "config/ConfigGlobal.hxx"
+#include "config/ConfigOption.hxx"
+
+#include "thread/Util.hxx"
+#include "thread/Slack.hxx"
+
+#include "rt_opt.hxx"
+
+#include <stdlib.h>
+#include <errno.h>
+#include <string.h>
+#include <assert.h>
+
+static constexpr Domain rt_opt_domain("rt_opt");
+
+#define IS_ENABLE_RTOPT			enable_rtopt
+#define IS_ENABLE_MEMLOCK		enable_memlock
+#define IS_ENABLE_PRIORITY(p)	( (p) != RTOPT_DISABLE )
+
+#define AUDIO_OUTPUT_PRIORITY      ((const char *)"priority")
+#define AUDIO_OUTPUT_NAME          ((const char *)"name")
+#define AUDIO_OUTPUT_TIMERSLACK    ((const char *)"timerslack")
+#define DEFAULT_TIMERSLACK         ((const unsigned)100)
+
+#define IS_EQUAL_PRIORITY(p1,p2) (((p1)->policy    == (p2)->policy) && \
+		 				      ((p1)->priority == (p2)->priority))
+
+#define MIN_PRIORITY				1
+#define MAX_PRIORITY				99
+
+#define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))
+
+struct policy_info {
+	const char*  name;
+	const int    policy;
+};
+
+static struct policy_info policy_tab[] = {
+		{  RTOPT_SCHED_OTHER,  SCHED_OTHER },
+		{  RTOPT_SCHED_FIFO,   SCHED_FIFO },
+		{  RTOPT_SCHED_RR,    SCHED_RR },
+		{  RTOPT_SCHED_BATCH,  SCHED_BATCH },
+#ifdef SCHED_IDLE
+		{  RTOPT_SCHED_IDLE,  SCHED_IDLE }
+#endif
+};
+
+static const char* priority_keys[] = {
+		RTOPT_MAIN_PRIORITY_NAME,
+		RTOPT_IO_PRIORITY_NAME,
+		RTOPT_PLAYER_PRIORITY_NAME,
+		RTOPT_DECODER_PRIORITY_NAME,
+		RTOPT_UPDATE_PRIORITY_NAME
+};
+
+
+static struct rtopt_priority priority_tab[ARRAY_SIZE(priority_keys)];
+
+static struct rtopt_priority **output_priority_tab = NULL;
+static unsigned output_count = 0;
+
+static bool enable_rtopt = false;
+static bool enable_memlock = false;
+static size_t stack_reserve = RTOPT_DEFAULT_STACK_RESERVE;
+static size_t heap_reserve  = RTOPT_DEFAULT_HEAP_RESERVE;
+
+
+static void setUnlimited( const int target, const char *target_name);
+static int get_policy(char *name);
+static void init_priority_tab(void);
+static unsigned audio_output_config_count(void);
+static unsigned init_output_priority_tab(void);
+static int strtointeger(char *str, int *ival);
+static void parse_priority(const char *paramstr, struct rtopt_priority *priority);
+static void set_parameter(void);
+static const struct rtopt_priority *get_priority_param(const char *key);
+static const struct rtopt_priority *get_output_priority_param(const char *key);
+static void reset_limit(void);
+static int get_current_priority(struct rtopt_priority *priority);
+static int change_priority(const struct rtopt_priority *priority);
+
+
+static void
+setUnlimited( const int target, const char *target_name) {
+	const struct rlimit unlimited = {
+	  RLIM_INFINITY,
+	  RLIM_INFINITY
+	};
+	const int res = setrlimit(target,&unlimited);
+	if ( res < 0 ) {
+	  FormatFatalError("setrlimit %s error %d(%s)\n",target_name,errno,strerror(errno));
+	}
+}
+
+static int
+get_policy(char *name) {
+	for (unsigned i = 0; i < ARRAY_SIZE(policy_tab); i++ ) {
+		if (strcmp(name,policy_tab[i].name) == 0) {
+			return policy_tab[i].policy;
+		}
+	}
+	return RTOPT_DISABLE;
+}
+
+static void
+init_priority_tab(void) {
+	for (unsigned i = 0; i < ARRAY_SIZE(priority_tab); i++) {
+		priority_tab[i].name = priority_keys[i];
+		priority_tab[i].policy = RTOPT_DISABLE;
+		priority_tab[i].priority = 0;
+/*
+		priority_tab[i].policy = SCHED_OTHER;
+		priority_tab[i].priority = 0;
+*/
+	}
+}
+
+/*  from output_all.c  */
+static unsigned
+audio_output_config_count(void)
+{
+	unsigned int nr = 0;
+	const auto *param = config_get_block(ConfigBlockOption::AUDIO_OUTPUT);
+
+	while (param != nullptr) {
+	  nr++;
+	  param = param->next;
+	}
+
+
+//	if (!nr)
+//		nr = 1; /* we'll always have at least one device  */
+	return nr;
+}
+
+static unsigned
+init_output_priority_tab(void) {
+	const char *p = NULL;
+	const char *name = NULL;
+	struct rtopt_priority *pri = NULL;
+
+	unsigned cnt = audio_output_config_count();
+	if ( cnt == 0 ) {
+		return 0;
+	}
+
+	output_priority_tab = (struct rtopt_priority **)malloc(sizeof(struct rtopt_priority *) * cnt);
+	for ( unsigned i = 0; i < cnt; i++ ) {
+		output_priority_tab[i] = NULL;
+	}
+
+	unsigned idx = 0;
+	const auto *param = config_get_block(ConfigBlockOption::AUDIO_OUTPUT);
+	for ( unsigned i = 0; i < cnt; i++) {
+		assert(param);
+
+		name = param->GetBlockValue(AUDIO_OUTPUT_NAME);
+		if ( name != NULL ) {
+			pri = (struct rtopt_priority *)malloc(sizeof( struct rtopt_priority ));
+			pri->name = name;
+			p = param->GetBlockValue(AUDIO_OUTPUT_PRIORITY);
+
+			parse_priority(p, pri);
+			pri->timerslack = param->GetBlockValue(AUDIO_OUTPUT_TIMERSLACK,DEFAULT_TIMERSLACK);
+			FormatDebug(rt_opt_domain,
+				    "realtime_option(init_output_priority_tab): output priority name %s policy %d  priority %d timerslack %lu\n",
+				    pri->name,pri->policy,pri->priority,pri->timerslack);
+			output_priority_tab[idx++] = pri;
+		} else {
+			FormatWarning(rt_opt_domain,
+				      "realtime_option(init_output_priority_tab): Missing \"name\" configuration\n");
+		}
+		param = param->next;
+	}
+	return idx;
+}
+
+
+static int
+strtointeger(char *str, int *ival) {
+	char *endptr = NULL;
+
+	*ival = strtol(str, &endptr, 10);
+	return (*endptr == '\0') ? 0 : -1;
+}
+
+static void
+parse_priority(const char *paramstr, struct rtopt_priority *priority) {
+	char *policyname = NULL;
+	char *pstr = NULL;
+	int  priority_val;
+	int  policy_val;
+
+	priority->policy = RTOPT_DISABLE;
+	priority->priority = 0;
+
+	if ( paramstr == NULL ) {
+		return;
+	}
+	priority->policy = SCHED_OTHER;
+
+	policyname = (char *)alloca(strlen(paramstr) + 1);
+	strcpy(policyname,paramstr);
+	pstr = strchr(policyname,':');
+
+	if ( pstr != NULL ) {
+		*pstr++ = '\0';
+	}
+
+	if ( strcmp(policyname,RTOPT_SCHED_OTHER) == 0 ) {
+		return;
+	} else if ( (policy_val = get_policy(policyname)) < 0 ) {
+		FormatWarning(rt_opt_domain,
+			      "realtime_option(parse_priority): illegal policy name = '%s'   priority = '%s'\n",
+			      priority->name,paramstr);
+		return;
+	}
+
+	if ( pstr == NULL ) {
+		FormatWarning(rt_opt_domain,
+			      "realtime_option(parse_priority): undefined priority  name = '%s'   priority = '%s'\n",
+			      priority->name,paramstr);
+		return;
+	}
+	if ( strtointeger(pstr, &priority_val) != 0 ) {
+		FormatWarning(rt_opt_domain,
+			      "realtime_option(parse_priority): priority isn't number name = '%s'   priority = '%s'\n",
+			      priority->name,paramstr);
+		return;
+	}
+
+	if ( (priority_val < MIN_PRIORITY) ||
+			(priority_val > MAX_PRIORITY) ) {
+		FormatWarning(rt_opt_domain,
+			      "realtime_option(parse_priority): illegal priority  name = '%s'   priority = '%s'\n",
+			      priority->name,paramstr);
+		return;
+	}
+
+	priority->policy = policy_val;
+	priority->priority = priority_val;
+}
+
+
+static void
+set_parameter(void) {
+	const ConfigBlock *param = NULL;
+	struct rtopt_priority *pri = NULL;
+	const char *pstr;
+
+	init_priority_tab();
+
+	enable_rtopt = false;
+	param = config_get_block(ConfigBlockOption::RTOPT);
+	if ( param == NULL ) {
+		return;
+	}
+	enable_rtopt = true;
+
+	enable_memlock = param->GetBlockValue(RTOPT_MEMLOCK_NAME,false);
+
+	stack_reserve = param->GetBlockValue(RTOPT_STACKRESERVE_NAME,RTOPT_DEFAULT_STACK_RESERVE) * 1024;
+
+	heap_reserve  = param->GetBlockValue(RTOPT_HEAPRESERVE_NAME,RTOPT_DEFAULT_HEAP_RESERVE) * 1024;
+
+	if ( enable_memlock ) {
+	  FormatDebug(rt_opt_domain,
+		      "realtime_option(set_parameter): memlock enable  stack_reserve : %zu   heap_reserve : %zu\n",
+		      stack_reserve,heap_reserve);
+	}
+
+	for (unsigned i = 0; i < ARRAY_SIZE(priority_tab); i++ ) {
+		pri = priority_tab + i;
+		pstr = param->GetBlockValue(pri->name);
+		parse_priority(pstr, pri);
+		FormatDebug(rt_opt_domain,
+			    "realtime_option(set_parameter): %s  policy %d  priority %d\n",
+			    pri->name,pri->policy,pri->priority);
+	}
+	output_count = init_output_priority_tab();
+}
+
+static const struct rtopt_priority
+*get_priority_param(const char *key) {
+	for (unsigned i = 0; i < ARRAY_SIZE(priority_keys); i++) {
+		if ( strcmp(key,priority_keys[i]) == 0 ) {
+			return priority_tab + i;
+		}
+	}
+	return NULL;
+}
+
+static const struct rtopt_priority
+*get_output_priority_param(const char *key) {
+	for ( unsigned i = 0; i < output_count; i++ ) {
+		if ( output_priority_tab[i] == NULL ) {
+			return NULL;
+		}
+		if ( strcmp(key,output_priority_tab[i]->name) == 0 ) {
+			return output_priority_tab[i];
+		}
+	}
+	return NULL;
+}
+
+static void
+reset_limit() {
+	setUnlimited(RLIMIT_MEMLOCK,"memlock");
+	setUnlimited(RLIMIT_RTPRIO, "rtprio");
+}
+
+static int get_current_priority(struct rtopt_priority *priority) {
+	struct sched_param param;
+	int res;
+
+	res = sched_getparam(0,&param);
+	if ( res < 0 ) {
+		FormatWarning(rt_opt_domain,
+			      "realtime_option(get_current_priority): sched_getparm error errno = %s(%d)\n",
+			      strerror(errno),errno);
+		return -1;
+	}
+
+	res = sched_getscheduler(0);
+	if ( res < 0 ) {
+		FormatWarning(rt_opt_domain,
+			      "realtime_option(get_current_priority): sched_getscheduler error errno = %s(%d)\n",
+			      strerror(errno),errno);
+		return -1;
+	}
+	priority->policy = res;
+	priority->priority = param.sched_priority;
+	return 0;
+}
+
+static int change_priority(const struct rtopt_priority *priority) {
+	struct sched_param param = { priority->priority };
+
+	int res = sched_setscheduler(0,priority->policy,&param);
+	if ( res < 0 ) {
+		FormatWarning(rt_opt_domain,
+			      "realtime_option(change_priority): sched_setscheduler error errno = %s(%d)\n",
+			      strerror(errno),errno);
+	}
+	FormatDebug(rt_opt_domain,
+		    "realtime_option(change_priority): name %s  policy %d   priority %d\n",
+		    priority->name,priority->policy,param.sched_priority);
+	return res;
+}
+
+static unsigned long get_output_timerslack(const char *name) {
+	const struct rtopt_priority *param = get_output_priority_param(name);
+	if ( param == NULL ) {
+		FormatDebug(rt_opt_domain,
+			 "realtime_option(rtopt_get_output_timerslack): name not found name = '%s'\n",name);
+		return DEFAULT_TIMERSLACK;
+	}
+	FormatDebug(rt_opt_domain,
+		 "realtime_option(rtopt_get_output_timerslack): name %s   policy %d  timerslack %lu\n",
+		 param->name,param->policy,param->timerslack);
+	return param->timerslack;
+}
+
+
+void rtopt_init() {
+	set_parameter();
+	if ( !IS_ENABLE_RTOPT ) {
+		return;
+	}
+	reset_limit();
+}
+
+
+void rtopt_memlock() {
+	void *ptr = NULL;
+
+	if ( !IS_ENABLE_RTOPT ) {
+		FormatDebug(rt_opt_domain,
+			    "realtime_option(rtopt_memlock): realtime_option disabled\n");
+		return;
+	}
+
+	if ( stack_reserve != (size_t)0 ) {
+		FormatDebug(rt_opt_domain,
+			 "realtime_option(rtopt_memlock): stack_reserve %zu",stack_reserve);
+		bzero(alloca(stack_reserve), stack_reserve);
+	}
+
+	if ( heap_reserve != (size_t)0 ) {
+		FormatDebug(rt_opt_domain,
+			 "realtime_option(rtopt_memlock): heap_reserve %zu",heap_reserve);
+		ptr = malloc(heap_reserve);
+		if ( ptr != NULL ) {
+			bzero(ptr, heap_reserve);
+			free(ptr);
+		} else {
+			FormatFatalError("realtime_option(rtopt_memlock): heap allocate error reserved size = %d\n",
+					 heap_reserve);
+		}
+	}
+
+	if ( !IS_ENABLE_MEMLOCK ) {
+		FormatDebug(rt_opt_domain,
+			 "realtime_option(rtopt_memlock): memlock disabled\n");
+		return;
+	}
+
+	int stat = mlockall(MCL_CURRENT);
+	if ( stat < 0 ) {
+		FormatFatalError("realtime_option(rtopt_memlock): mlockall error errno = %d(%s)\n",
+				 errno,strerror(errno));
+	}
+}
+
+int rtopt_change_priority(const char *name) {
+	const struct rtopt_priority *param = get_priority_param(name);
+	if ( param == NULL ) {
+		FormatDebug(rt_opt_domain,
+			 "realtime_option(rtopt_change_priority): name not found name = '%s'\n",name);
+		return -1;
+	}
+
+	if ( !IS_ENABLE_PRIORITY(param->policy) ) {
+		if ( strcmp(name,RTOPT_UPDATE_PRIORITY_NAME) == 0 ) {
+			SetThreadIdlePriority();
+			FormatDebug(rt_opt_domain,
+				    "realtime_option(rtopt_change_priority): name %s  SCHED_IDLE",name);
+		}
+		return 1;
+	}
+	FormatDebug(rt_opt_domain,
+		 "realtime_option(rtopt_change_priority): name %s   policy %d  priority %d\n",
+		 param->name,param->policy,param->priority);
+	return rtopt_change_thread_priority(param);
+}
+
+int rtopt_change_output_priority(const char *name) {
+	const struct rtopt_priority *param = get_output_priority_param(name);
+	if ( param == NULL ) {
+		FormatDebug(rt_opt_domain,
+			 "realtime_option(rtopt_change_output_priority): name not found name = '%s'\n",name);
+		return -1;
+	}
+	FormatDebug(rt_opt_domain,
+		 "realtime_option(rtopt_change_output_priority): name %s   policy %d  priority %d\n",
+		 param->name,param->policy,param->priority);
+	return rtopt_change_thread_priority(param);
+}
+
+
+int rtopt_change_thread_priority(const struct rtopt_priority *new_priority) {
+	struct rtopt_priority save;
+
+	if ( !IS_ENABLE_RTOPT ) {
+		return 1;
+	}
+	if ( !IS_ENABLE_PRIORITY(new_priority->policy) ) {
+		return 1;
+	}
+
+	if ( get_current_priority(&save) < 0 ) {
+		return 1;
+	}
+
+	if ( IS_EQUAL_PRIORITY(new_priority, &save) ) {
+		FormatDebug(rt_opt_domain,
+			 "realtime_option(rtopt_change_thread_priority): name %s not changed",
+			 new_priority->name);
+		return 1;
+	}
+
+	return change_priority(new_priority);
+}
+
+void rtopt_change_output_timerslack(const char *name) {
+  unsigned long t = get_output_timerslack(name);
+
+  SetThreadTimerSlackUS(t);
+  FormatDebug(rt_opt_domain,"output:%s  timerslack %lu", name,t);
+}
diff -urN mpd-9999.orig/src/rt_opt.hxx mpd-9999/src/rt_opt.hxx
--- mpd-9999.orig/src/rt_opt.hxx	1970-01-01 01:00:00.000000000 +0100
+++ mpd-9999/src/rt_opt.hxx	2017-02-18 23:27:49.042371593 +0000
@@ -0,0 +1,102 @@
+/*
+ * Copyright (C) 2003-2010 The Music Player Daemon Project
+ * http://www.musicpd.org
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+//
+// mpd.conf
+//
+// realtime_option {
+//     main_priority        "POLICY:PRIORITY"
+//     io_priority          "POLICY:PRIORITY"
+//     decorder_priority    "POLICY:PRIORITY"
+//     player_priority      "POLICY:PRIORITY"
+//     update_priority      "POLICY:PRIORITY"
+//
+//     memlock              "yes" or "no"
+//     stackreserve	       "1024"
+//     heapreserve	       "10240"
+//
+//   }
+//
+//  POLICY  "OTHER" | "FIFO" | "RR" | "BATCH" | "IDLE"
+//  PRIORITY
+//            OTHER,BATCH,IDLE   0
+//            FIFO, RR           1 - 99
+//
+//   audio_output {
+//       ....
+//       ....
+//     priority              "POLICY:PRIORITY"
+//     timerslack            unsigned long(default value = 100)
+//   }
+//
+
+#ifndef RT_OPT_H_
+#define RT_OPT_H_
+
+#include <sys/time.h>
+#include <sys/resource.h>
+#include <sys/mman.h>
+#include <sched.h>
+#include <sys/types.h>
+#include <unistd.h>
+
+#ifdef ENABLE_RTOPT
+#define RTOPT_MAIN_PRIORITY_NAME	((const char *)"main_priority")
+#define RTOPT_IO_PRIORITY_NAME	        ((const char *)"io_priority")
+#define RTOPT_DECODER_PRIORITY_NAME	((const char *)"decoder_priority")
+#define RTOPT_PLAYER_PRIORITY_NAME	((const char *)"player_priority")
+#define RTOPT_UPDATE_PRIORITY_NAME      ((const char *)"update_priority")
+#define RTOPT_MEMLOCK_NAME		((const char *)"memlock")
+#define RTOPT_STACKRESERVE_NAME         ((const char *)"stack_reserve")
+#define RTOPT_HEAPRESERVE_NAME          ((const char *)"heap_reserve")
+
+
+#define RTOPT_MAIL_PRIORITY    0
+#define RTOPT_DECODER_PRIORITY 1
+#define RTOPT_PLAYER_PRIORITY  2
+
+#define RTOPT_DEFAULT_STACK_RESERVE ((size_t)0)
+#define RTOPT_DEFAULT_HEAP_RESERVE  ((size_t)0)
+
+
+#define RTOPT_SCHED_OTHER  "OTHER"
+#define RTOPT_SCHED_FIFO   "FIFO"
+#define RTOPT_SCHED_RR     "RR"
+#define RTOPT_SCHED_BATCH  "BATCH"
+#define RTOPT_SCHED_IDLE   "IDLE"
+
+#define RTOPT_DISABLE (-1)
+
+struct rtopt_priority {
+	const char	*name;
+	int		policy;
+	int		priority;
+        unsigned long   timerslack;
+};
+
+void rtopt_init(void);
+void rtopt_memlock(void);
+int  rtopt_change_priority(const char *name);
+int  rtopt_change_output_priority(const char *name);
+int  rtopt_change_thread_priority(const struct rtopt_priority *new_priority);
+void rtopt_change_output_timerslack(const char *name);
+
+#endif /* ENABLE_RTOPT */
+
+#endif /* RT_OPT_H_ */
