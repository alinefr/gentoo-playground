--- a/patches/patchinstall.sh
+++ b/patches/patchinstall.sh
@@ -31,15 +31,18 @@
 	echo ""
 	echo "Configuration:"
 	echo "  DESTDIR=path         Specify the path to the wine source tree"
-	echo "  --all          		 Select all patches"
-	echo "  --help    	     	 Display this help and exit"
-	echo "  --no-autoupdate  	 Do not apply patchlist and don't auto-update files"
-	echo "  -W patchset        	 Exclude a specific patchset"
+	echo "  --all                Select all patches"
+	echo "  --help               Display this help and exit"
+	echo "  --no-patchlist       Do not apply patchlist (needed for 'wine --patches')"
+	echo "  --no-autoconf        Do not run autoreconf and tools/make_requests"
+	echo "  -W patchset          Exclude a specific patchset"
 	echo ""
 	echo "Backends:"
 	echo "  --backend=patch      Use regular 'patch' utility to apply patches (default)"
+	echo "  --backend=epatch     Use 'epatch' to apply patches (Gentoo only)"
 	echo "  --backend=git-am     Use 'git am' to apply patches"
 	echo "  --backend=git-apply  Use 'git apply' to apply patches"
+	echo "  --backend=stg        Import the patches using stacked git"
 	echo ""
 }
 
@@ -596,7 +595,8 @@
 
 # Default settings
 patch_enable_all 0
-enable_autoupdate=1
+enable_patchlist=1
+enable_autoconf=1
 patchlist="/dev/null"
 backend="patch"
 enable=1
@@ -605,6 +605,7 @@
 	abort "No commandline arguments given, don't know what to do."
 fi
 
+# Parse commandline arguments
 while test "$#" -gt 0; do
 	if patch_enable "$1" "$enable"; then
 		shift
@@ -637,8 +638,13 @@
 			exit 0
 			;;
 
-		--no-autoupdate)
-			enable_autoupdate=0
+		--no-patchlist)
+			enable_patchlist=0
+			shift
+			;;
+
+		--no-autoconf)
+			enable_autoconf=0
 			shift
 			;;
 
@@ -657,20 +663,71 @@
 	abort "Missing argument for -W, expected patchname."
 fi
 
+# Determine DESTDIR if not explicitly specified
+if test -z "$DESTDIR" -a -f ./tools/make_requests; then
+	DESTDIR="$(pwd)"
+
+elif test ! -f "$DESTDIR/tools/make_requests"; then
+	abort "DESTDIR does not point to the Wine source tree."
+fi
+
+# Most backends will try to use git, either directly or indirectly.
+# Unfortunately this does not work when "$DESTDIR" points to a
+# subdirectory of a git tree, which has the effect that no patches
+# are applied, but the exitcode is zero. To avoid broken builds we
+# will workaround this issue or abort. For more information see
+# https://github.com/wine-compholio/wine-staging/issues/7
+test ! -d "$DESTDIR/.git" && (cd "$DESTDIR"; git rev-parse --git-dir) &> /dev/null
+workaround_git_bug="$?"
+
 # Apply the patches using gitapply.sh, a small wrapper around 'patch'
 if test "$backend" = "patch"; then
 
+	if test "$workaround_git_bug" -eq 0; then
+		gitapply_args="--nogit"
+	else
+		gitapply_args=""
+	fi
+
 	patch_apply ()
 	{
 		echo "Applying $1"
-		if ! ../debian/tools/gitapply.sh -d "$DESTDIR" < "$1"; then
+		if ! ../debian/tools/gitapply.sh $gitapply_args -d "$DESTDIR" < "$1"; then
 			abort "Failed to apply patch, aborting!"
 		fi
 	}
 
+# 'epatch' backend - used on Gentoo
+elif test "$backend" = "epatch"; then
+
+	if test "$workaround_git_bug" -eq 0; then
+		gitapply_args="--nogit"
+	else
+		gitapply_args=""
+	fi
+
+	patch_apply ()
+	{
+		if grep -q "^GIT binary patch" "$1"; then
+			ebegin "Applying $1"
+			../debian/tools/gitapply.sh $gitapply_args -d "$DESTDIR" < "$1"\
+			|| die "Failed Patch: $1!"
+			eend
+		else
+			current_patch="$(readlink -f "$1")"
+			pushd "$DESTDIR" > /dev/null
+			epatch "$current_patch" # epatch calls die upon failure
+			popd > /dev/null
+		fi
+	}
+
 # GIT backend - apply patches using 'git am'
 elif test "$backend" = "git" -o "$backend" = "git-am"; then
 
+	if test "$workaround_git_bug" -eq 0; then
+		abort "Backend 'git-am' not possible when DESTDIR points to a git subdirectory."
+	fi
+
 	patch_apply ()
 	{
 		echo "Applying $1"
@@ -682,6 +739,10 @@
 # Git apply backend
 elif test "$backend" = "git-apply"; then
 
+	if test "$workaround_git_bug" -eq 0; then
+		abort "Backend 'git-apply' not possible when DESTDIR points to a git subdirectory."
+	fi
+
 	patch_apply ()
 	{
 		echo "Applying $1"
@@ -693,9 +754,14 @@
 # Stacked GIT backend - import the patches (mainly for developers)
 elif test "$backend" = "stg"; then
 
+	if test "$workaround_git_bug" -eq 0; then
+		abort "Backend 'stg' not possible when DESTDIR points to a git subdirectory."
+	fi
+
 	# Only import the regular patches, no autogenerated ones -
 	# moreover, don't run autoreconf or ./tools/make_requests.
-	enable_autoupdate=0
+	enable_patchlist=0
+	enable_autoconf=0
 
 	patch_apply ()
 	{
@@ -814,26 +887,22 @@
 fi
 
 
-if test -z "$DESTDIR" -a -f ./tools/make_requests; then
-	DESTDIR="$(pwd)"
-
-elif test ! -f "$DESTDIR/tools/make_requests"; then
-	abort "DESTDIR does not point to the Wine source tree."
-fi
-
 # To make sure we find all the patches and tools switch to the patches directory now
 script="$(readlink -f "$0")"
 curdir="$(dirname "$script")"
-if ! cd "$curdir"; then
-	abort "Failed to change working directory to $curdir."
+if test -f "$curdir/patchinstall.sh"; then
+	if ! cd "$curdir"; then
+		abort "Failed to change working directory to $curdir."
+	fi
+elif test ! -f ./patchinstall.sh; then
+	abort "Failed to find patch directory."
 fi
 
 # If autoupdate is enabled then create a tempfile to keep track of all patches
-if test "$enable_autoupdate" -eq 1; then
+if test "$enable_patchlist" -eq 1; then
 	patchlist=$(mktemp)
 	if test ! -f "$patchlist"; then
-		echo "ERROR: Unable to create temporary file for patchlist." >&2
-		exit 1
+		abort "Unable to create temporary file for patchlist."
 	fi
 fi
 
@@ -3464,7 +3554,7 @@
 fi
 
 
-if test "$enable_autoupdate" -eq 1; then
+if test "$enable_patchlist" -eq 1; then
 
 	# Generate a temporary patch containing the patchlist and apply it
 	patch_data=$(cat "$patchlist" | sort)
@@ -3543,8 +3633,9 @@
 		patch_apply "$patchlist"
 	fi
 	rm "$patchlist"
+fi
 
-	# Other autogenerated changes
+if test "$enable_autoconf" -eq 1; then
 	if ! (cd "$DESTDIR" && autoreconf -f); then
 		abort "'autoreconf -f' failed."
 	fi
