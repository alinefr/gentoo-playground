--- chromium-ozone-wayland-9999.ebuild	2016-03-15 11:28:46.091372430 +0000
+++ ../chromium/chromium-51.0.2693.2-r1.ebuild	2016-04-07 13:55:12.135374232 +0100
@@ -10,19 +10,19 @@
 	sv sw ta te th tr uk vi zh_CN zh_TW"
 
 inherit check-reqs chromium eutils flag-o-matic multilib multiprocessing pax-utils \
-	portability python-any-r1 readme.gentoo toolchain-funcs versionator \
-	virtualx git-r3
+	portability python-any-r1 readme.gentoo toolchain-funcs versionator virtualx
 
-DESCRIPTION="Chromium Ozone for Wayland - Google Chromium web browser"
-HOMEPAGE="https://01.org/ozone-wayland"
+DESCRIPTION="Open-source version of Google Chrome web browser"
+HOMEPAGE="http://chromium.org/"
+SRC_URI="https://commondatastorage.googleapis.com/chromium-browser-official/${P}.tar.xz"
+
+LICENSE="BSD hotwording? ( no-source-code )"
+SLOT="0"
+KEYWORDS="~amd64 ~arm ~arm64 ~x86"
+IUSE="cups gn gnome gnome-keyring gtk3 +hangouts hidpi hotwording kerberos neon pic +proprietary-codecs pulseaudio selinux +system-ffmpeg +tcmalloc widevine opencl"
+RESTRICT="!system-ffmpeg? ( proprietary-codecs? ( bindist ) )"
 
-EGIT_REPO_URI="https://github.com/01org/ozone-wayland.git"
-
-LICENSE="BSD"
-SLOT="live"
-KEYWORDS="~amd64 ~arm ~x86"
-RESTRICT="proprietary-codecs? ( bindist )"
-IUSE="cups gnome gnome-keyring gtk3 +hangouts hidpi hotwording kerberos neon pic +proprietary-codecs pulseaudio selinux +tcmalloc opencl custom-cflags"
+REQUIRED_USE="gn? ( kerberos !system-ffmpeg )"
 
 # Native Client binaries are compiled with different set of flags, bug #452066.
 QA_FLAGS_IGNORED=".*\.nexe"
@@ -31,47 +31,60 @@
 # right tools for it, bug #469144 .
 QA_PRESTRIPPED=".*\.nexe"
 
-RDEPEND=">=app-accessibility/speech-dispatcher-0.8:=
+RDEPEND="
 	app-arch/bzip2:=
-	app-arch/snappy:=
-	app-crypt/libsecret:=
 	cups? ( >=net-print/cups-1.3.11:= )
 	>=dev-libs/elfutils-0.149
 	dev-libs/expat:=
 	dev-libs/glib:=
-	>=dev-libs/icu-55.1:=
 	>=dev-libs/jsoncpp-0.5.0-r1:=
-	>=dev-libs/libevent-1.4.13:=
-	dev-libs/libxml2:=[icu]
-	dev-libs/libxslt:=
 	dev-libs/nspr:=
 	>=dev-libs/nss-3.14.3:=
-	dev-libs/re2:=
 	gnome? ( >=gnome-base/gconf-2.24.0:= )
 	gnome-keyring? ( >=gnome-base/libgnome-keyring-3.12:= )
 	>=media-libs/alsa-lib-1.0.19:=
-	media-libs/flac:=
 	media-libs/fontconfig:=
 	media-libs/freetype:=
-	media-libs/harfbuzz:=[icu(+)]
 	media-libs/libexif:=
-	x11-libs/libva:=
-	>=media-libs/libjpeg-turbo-1.2.0-r1:=
-	media-libs/libpng:0=
-	>=media-libs/libwebp-0.4.0:=
 	media-libs/speex:=
 	pulseaudio? ( media-sound/pulseaudio:= )
+	system-ffmpeg? ( >=media-video/ffmpeg-2.7.2:= )
 	sys-apps/dbus:=
 	sys-apps/pciutils:=
 	>=sys-libs/libcap-2.22:=
-	sys-libs/zlib:=[minizip]
 	virtual/udev
 	x11-libs/cairo:=
 	x11-libs/gdk-pixbuf:=
+	gtk3? ( x11-libs/gtk+:3= )
+	!gtk3? ( x11-libs/gtk+:2= )
 	x11-libs/libdrm
+	x11-libs/libX11:=
+	x11-libs/libXcomposite:=
+	x11-libs/libXcursor:=
+	x11-libs/libXdamage:=
+	x11-libs/libXext:=
+	x11-libs/libXfixes:=
+	>=x11-libs/libXi-1.6.0:=
+	x11-libs/libXinerama:=
+	x11-libs/libXrandr:=
+	x11-libs/libXrender:=
+	x11-libs/libXScrnSaver:=
+	x11-libs/libXtst:=
+	x11-libs/pango:=
 	kerberos? ( virtual/krb5 )
-	>=dev-libs/wayland-1.5
-	opencl? ( virtual/opencl )"
+	!gn? (
+		>=app-accessibility/speech-dispatcher-0.8:=
+		app-arch/snappy:=
+		>=dev-libs/libevent-1.4.13:=
+		dev-libs/libxml2:=[icu]
+		dev-libs/libxslt:=
+		media-libs/flac:=
+		>=media-libs/harfbuzz-0.9.41:=[icu(+)]
+		>=media-libs/libjpeg-turbo-1.2.0-r1:=
+		media-libs/libpng:0=
+		>=media-libs/libwebp-0.4.0:=
+		sys-libs/zlib:=[minizip]
+	)"
 DEPEND="${RDEPEND}
 	!arm? (
 		dev-lang/yasm
@@ -87,13 +100,15 @@
 
 # For nvidia-drivers blocker, see bug #413637 .
 RDEPEND+="
-	!=www-client/chromium-9999*
+	!=www-client/chromium-9999
 	!<www-plugins/chrome-binary-plugins-37
 	x11-misc/xdg-utils
 	virtual/opengl
 	virtual/ttf-fonts
+	opencl? ( virtual/opencl )
 	selinux? ( sec-policy/selinux-chromium )
-	tcmalloc? ( !<x11-drivers/nvidia-drivers-331.20 )"
+	tcmalloc? ( !<x11-drivers/nvidia-drivers-331.20 )
+	widevine? ( www-plugins/chrome-binary-plugins[widevine(-)] )"
 
 # Python dependencies. The DEPEND part needs to be kept in sync
 # with python_check_deps.
@@ -106,12 +121,12 @@
 	dev-python/simplejson[${PYTHON_USEDEP}]
 ')"
 python_check_deps() {
-	has_version "dev-python/beautifulsoup:python-2[${PYTHON_USEDEP}]" && \
-		has_version "dev-python/beautifulsoup:4[${PYTHON_USEDEP}]" && \
-		has_version "dev-python/html5lib[${PYTHON_USEDEP}]" && \
-		has_version "dev-python/jinja[${PYTHON_USEDEP}]" && \
-		has_version "dev-python/ply[${PYTHON_USEDEP}]" && \
-		has_version "dev-python/simplejson[${PYTHON_USEDEP}]"
+	has_version --host-root "dev-python/beautifulsoup:python-2[${PYTHON_USEDEP}]" &&
+	has_version --host-root "dev-python/beautifulsoup:4[${PYTHON_USEDEP}]" &&
+	has_version --host-root "dev-python/html5lib[${PYTHON_USEDEP}]" &&
+	has_version --host-root "dev-python/jinja[${PYTHON_USEDEP}]" &&
+	has_version --host-root "dev-python/ply[${PYTHON_USEDEP}]" &&
+	has_version --host-root "dev-python/simplejson[${PYTHON_USEDEP}]"
 }
 
 if ! has chromium_pkg_die ${EBUILD_DEATH_HOOKS}; then
@@ -142,8 +157,6 @@
 - x11-themes/tango-icon-theme
 "
 
-S="${WORKDIR}/src"
-
 pkg_pretend() {
 	if [[ $(tc-getCC)$ == *gcc* ]] && \
 		[[ $(gcc-major-version)$(gcc-minor-version) -lt 48 ]]; then
@@ -162,7 +175,11 @@
 }
 
 pkg_setup() {
-	CHROMIUM_SUFFIX=-ozone
+	if [[ "${SLOT}" == "0" ]]; then
+		CHROMIUM_SUFFIX=""
+	else
+		CHROMIUM_SUFFIX="-${SLOT}"
+	fi
 	CHROMIUM_HOME="/usr/$(get_libdir)/chromium-browser${CHROMIUM_SUFFIX}"
 
 	# Make sure the build system will use the right python, bug #344367.
@@ -171,97 +188,50 @@
 	chromium_suid_sandbox_check_kernel_config
 }
 
-gclient_config() {
-	einfo "gclient config -->"
-	addwrite "${EGIT3_STORE_DIR}"
-	mkdir -p "${EGIT3_STORE_DIR}/${PN}"
-	"${WORKDIR}/depot_tools/gclient" config \
-		--deps-file "${3}" \
-		--name "${2}" \
-		--cache-dir "${EGIT3_STORE_DIR}/${PN}" \
-		"${1}"
-}
-
-gclient_sync() {
-	einfo "gclient sync -->"
-	"${WORKDIR}/depot_tools/gclient" sync --nohooks \
-		--delete_unversioned_trees -v || die
-}
-
-gclient_runhooks() {
-	# Run all hooks except gyp_chromium.
-	einfo "gclient runhooks -->"
-	cp src/DEPS src/DEPS.orig || die
-	sed -e 's:"python", "src/build/gyp_chromium":"true":' -i src/DEPS || die
-	"${WORKDIR}/depot_tools/gclient" runhooks
-	local ret=$?
-	mv src/DEPS.orig src/DEPS || die
-	[[ ${ret} -eq 0 ]] || die "gclient runhooks failed"
-}
-
-src_unpack() {
-	# grab depot_tools.
-	DEPOT_TOOLS_REPO="https://chromium.googlesource.com/chromium/tools/depot_tools.git"
-	git-r3_fetch "${DEPOT_TOOLS_REPO}"
-	git-r3_checkout "${DEPOT_TOOLS_REPO}" "${WORKDIR}/depot_tools"
-
-	cd "${WORKDIR}" || die
-
-	gclient_config "${EGIT_REPO_URI}" "src/ozone" ".DEPS.git"
-
-	gclient_sync
-
-	# Disabled so that we do not download nacl toolchain.
-	#gclient_runhooks
-
-	# Since we're not git-r3_checkout for the ozone repo, we need
-	# to set the EGIT_VERSION ourselves. 
-	cd ${S}/ozone
-	local new_commit_id=$(
-		git rev-parse --verify HEAD
-	)
-	export EGIT_VERSION=${new_commit_id}
-}
-
 src_prepare() {
-	# if ! use arm; then
-	#	mkdir -p out/Release/gen/sdk/toolchain || die
-	#	# Do not preserve SELinux context, bug #460892 .
-	#	cp -a --no-preserve=context /usr/$(get_libdir)/nacl-toolchain-newlib \
-	#		out/Release/gen/sdk/toolchain/linux_x86_newlib || die
-	#	touch out/Release/gen/sdk/toolchain/linux_x86_newlib/stamp.untar || die
-	# fi
-
-	# Upstream Ozone-Wayland patches
-	EPATCH_SUFFIX="patch" EPATCH_FORCE="yes" \
-				epatch "${S}"/ozone/patches/00* || die
-
-	
-	# jump now to WebRTC dir and apply the needed patches there
-	#cd third_party/webrtc/
-	#EPATCH_SUFFIX="patch" EPATCH_FORCE="yes" \
-	#			epatch "${S}"/ozone/patches/100* || die
-
-
-	# Gentoo Chromium patches
-	cd "${S}"
-	epatch "${FILESDIR}/chromium-system-jinja-r7.patch"
-	epatch "${FILESDIR}/chromium-libsecret-r0.patch"
-
-	# Remove any lingering nacl toolchain files.
-	rm -rf native_client/toolchain/linux_x86_newlib
-
+	epatch "${FILESDIR}/${PN}-system-ffmpeg-r2.patch"
+	epatch "${FILESDIR}/${PN}-system-jinja-r8.patch"
+	epatch "${FILESDIR}/${PN}-widevine-r1.patch"
+	epatch "${FILESDIR}/${PN}-last-commit-position-r0.patch"
+	epatch "${FILESDIR}/${PN}-snapshot-toolchain-r1.patch"
+	epatch "${FILESDIR}/${PN}-gn-r0.patch"
+	epatch "${FILESDIR}/enable_vaapi_on_linux-51.diff"
+	epatch "${FILESDIR}/fix-gtk3-build.patch"
+	epatch "${FILESDIR}/disable-openh264.diff"
+	epatch "${FILESDIR}/gn-using-system-icu.patch"
 	epatch_user
-	
-	${PYTHON} build/util/lastchange.py -o build/util/LASTCHANGE || die
-	${PYTHON} build/util/lastchange.py -s third_party/WebKit \
-		-o build/util/LASTCHANGE.blink || die
 
-	. chrome/VERSION
-	elog "Installing/updating to version ${MAJOR}.${MINOR}.${BUILD}.${PATCH} (Ozone-Wayland: ${EGIT_VERSION})"
+	local conditional_bundled_libraries=""
+	if ! use system-ffmpeg; then
+		conditional_bundled_libraries+=" third_party/ffmpeg"
+	fi
+	if use gn; then
+		conditional_bundled_libraries+="
+			base/third_party/libevent
+			third_party/adobe
+			third_party/ffmpeg
+			third_party/flac
+			third_party/harfbuzz-ng
+			third_party/icu
+			third_party/jinja2
+			third_party/libjpeg_turbo
+			third_party/libpng
+			third_party/libwebp
+			third_party/libxml
+			third_party/libxslt
+			third_party/markupsafe
+			third_party/snappy
+			third_party/speech-dispatcher
+			third_party/usb_ids
+			third_party/xdg-utils
+			third_party/yasm
+			third_party/zlib
+		"
+	fi
 
 	# Remove most bundled libraries. Some are still needed.
 	build/linux/unbundle/remove_bundled_libraries.py \
+		${conditional_bundled_libraries} \
 		'base/third_party/dmg_fp' \
 		'base/third_party/dynamic_annotations' \
 		'base/third_party/icu' \
@@ -300,7 +270,6 @@
 		'third_party/devscripts' \
 		'third_party/dom_distiller_js' \
 		'third_party/dom_distiller_js/dist/proto_gen/third_party/dom_distiller_js' \
-		'third_party/ffmpeg' \
 		'third_party/fips181' \
 		'third_party/flot' \
 		'third_party/google_input_tools' \
@@ -308,6 +277,7 @@
 		'third_party/google_input_tools/third_party/closure_library/third_party/closure' \
 		'third_party/hunspell' \
 		'third_party/iccjpeg' \
+		'third_party/icu' \
 		'third_party/jstemplate' \
 		'third_party/khronos' \
 		'third_party/leveldatabase' \
@@ -315,21 +285,20 @@
 		'third_party/libaddressinput' \
 		'third_party/libjingle' \
 		'third_party/libphonenumber' \
+		'third_party/libsecret' \
 		'third_party/libsrtp' \
 		'third_party/libudev' \
 		'third_party/libusb' \
-		'third_party/libvpx_new' \
-		'third_party/libvpx_new/source/libvpx/third_party/x86inc' \
 		'third_party/libva' \
+		'third_party/libvpx' \
+		'third_party/libvpx/source/libvpx/third_party/x86inc' \
 		'third_party/libxml/chromium' \
 		'third_party/libwebm' \
 		'third_party/libyuv' \
 		'third_party/lss' \
 		'third_party/lzma_sdk' \
 		'third_party/mesa' \
-		'third_party/minigbm' \
 		'third_party/modp_b64' \
-		'third_party/mojo' \
 		'third_party/mt19937ar' \
 		'third_party/npapi' \
 		'third_party/openmax_dl' \
@@ -347,6 +316,7 @@
 		'third_party/polymer' \
 		'third_party/protobuf' \
 		'third_party/qcms' \
+		'third_party/re2' \
 		'third_party/sfntly' \
 		'third_party/skia' \
 		'third_party/smhasher' \
@@ -367,43 +337,40 @@
 }
 
 src_configure() {
-	local myconf=""
+	local myconf_gyp=""
+	local myconf_gn=""
+
+	# GN needs explicit config for Debug/Release as opposed to inferring it from build directory.
+	myconf_gn+=" is_debug=false"
 
 	# Never tell the build system to "enable" SSE2, it has a few unexpected
 	# additions, bug #336871.
-	myconf+=" -Ddisable_sse2=1"
+	myconf_gyp+=" -Ddisable_sse2=1"
 
 	# Disable nacl, we can't build without pnacl (http://crbug.com/269560).
-	myconf+=" -Ddisable_nacl=1"
-
-	# Disable glibc Native Client toolchain, we don't need it (bug #417019).
-	# myconf+=" -Ddisable_glibc=1"
-
-	# TODO: also build with pnacl
-	# myconf+=" -Ddisable_pnacl=1"
-
-	# It would be awkward for us to tar the toolchain and get it untarred again
-	# during the build.
-	# myconf+=" -Ddisable_newlib_untar=1"
+	myconf_gyp+=" -Ddisable_nacl=1"
+	myconf_gn+=" enable_nacl=false"
 
 	# Make it possible to remove third_party/adobe.
 	echo > "${T}/flapper_version.h" || die
-	myconf+=" -Dflapper_version_h_file=${T}/flapper_version.h"
+	myconf_gyp+=" -Dflapper_version_h_file=${T}/flapper_version.h"
 
 	# Use system-provided libraries.
 	# TODO: use_system_hunspell (upstream changes needed).
+	# TODO: use_system_icu (bug #576370).
 	# TODO: use_system_libsrtp (bug #459932).
 	# TODO: use_system_libusb (http://crbug.com/266149).
 	# TODO: use_system_libvpx (http://crbug.com/494939).
 	# TODO: use_system_opus (https://code.google.com/p/webrtc/issues/detail?id=3077).
 	# TODO: use_system_protobuf (bug #525560).
+	# TODO: use_system_re2 (bug #571156).
 	# TODO: use_system_ssl (http://crbug.com/58087).
 	# TODO: use_system_sqlite (http://crbug.com/22208).
-	myconf+="
+	myconf_gyp+="
 		-Duse_system_bzip2=1
+		-Duse_system_ffmpeg=$(usex system-ffmpeg 1 0)
 		-Duse_system_flac=1
 		-Duse_system_harfbuzz=1
-		-Duse_system_icu=1
 		-Duse_system_jsoncpp=1
 		-Duse_system_libevent=1
 		-Duse_system_libjpeg=1
@@ -413,7 +380,6 @@
 		-Duse_system_libxslt=1
 		-Duse_system_minizip=1
 		-Duse_system_nspr=1
-		-Duse_system_re2=1
 		-Duse_system_snappy=1
 		-Duse_system_speex=1
 		-Duse_system_xdg_utils=1
@@ -421,17 +387,21 @@
 		-Duse_system_zlib=1"
 
 	# Needed for system icu - we don't need additional data files.
-	myconf+=" -Dicu_use_data_file_flag=0"
+	# myconf_gyp+=" -Dicu_use_data_file_flag=0"
 
 	# TODO: patch gyp so that this arm conditional is not needed.
 	if ! use arm; then
-		myconf+="
+		myconf_gyp+="
 			-Duse_system_yasm=1"
 	fi
 
+	# Disable OpenH264 support since we're using libva
+	myconf_gyp+="
+		-Duse_openh264=0"
+
 	# Optional dependencies.
 	# TODO: linux_link_kerberos, bug #381289.
-	myconf+="
+	myconf_gyp+="
 		$(gyp_use cups)
 		$(gyp_use gnome use_gconf)
 		$(gyp_use gnome-keyring use_gnome_keyring)
@@ -442,57 +412,56 @@
 		$(gyp_use hotwording enable_hotwording)
 		$(gyp_use kerberos)
 		$(gyp_use pulseaudio)
+		$(gyp_use opencl)
 		$(gyp_use tcmalloc use_allocator tcmalloc none)
-		$(gyp_use opencl)"
+		$(gyp_use widevine enable_widevine)"
+
+	myconf_gn+=" use_cups=$(usex cups true false)"
+	myconf_gn+=" use_allocator=$(usex tcmalloc \"tcmalloc\" \"none\")"
 
 	# Use explicit library dependencies instead of dlopen.
 	# This makes breakages easier to detect by revdep-rebuild.
-	myconf+="
+	myconf_gyp+="
 		-Dlinux_link_gsettings=1
 		-Dlinux_link_libpci=1
 		-Dlinux_link_libspeechd=1
 		-Dlibspeechd_h_prefix=speech-dispatcher/"
 
 	# TODO: use the file at run time instead of effectively compiling it in.
-	myconf+="
+	myconf_gyp+="
 		-Dusb_ids_path=/usr/share/misc/usb.ids"
 
 	# Save space by removing DLOG and DCHECK messages (about 6% reduction).
-	myconf+="
+	myconf_gyp+="
 		-Dlogging_like_official_build=1"
 
 	if [[ $(tc-getCC) == *clang* ]]; then
-		myconf+=" -Dclang=1"
+		myconf_gyp+=" -Dclang=1"
+		myconf_gn+=" is_clang=true"
 	else
-		myconf+=" -Dclang=0"
+		myconf_gyp+=" -Dclang=0"
+		myconf_gn+=" is_clang=false"
 	fi
 
 	# Never use bundled gold binary. Disable gold linker flags for now.
 	# Do not use bundled clang.
-	myconf+="
+	myconf_gyp+="
 		-Dclang_use_chrome_plugins=0
 		-Dhost_clang=0
 		-Dlinux_use_bundled_binutils=0
 		-Dlinux_use_bundled_gold=0
 		-Dlinux_use_gold_flags=0
 		-Dsysroot="
+	myconf_gn+=" use_sysroot=false"
 
 	ffmpeg_branding="$(usex proprietary-codecs Chrome Chromium)"
-	myconf+=" -Dproprietary_codecs=1 -Dffmpeg_branding=${ffmpeg_branding}"
-
-	# Ozone-Wayland
-	myconf+="
-		-Duse_ash=1
-		-Duse_aura=1
-		-Duse_ozone=1
-		-Denable_xdg_shell=1
-		-Duse_xkbcommon=1"
+	myconf_gyp+=" -Dproprietary_codecs=1 -Dffmpeg_branding=${ffmpeg_branding}"
 
 	# Set up Google API keys, see http://www.chromium.org/developers/how-tos/api-keys .
 	# Note: these are for Gentoo use ONLY. For your own distribution,
 	# please get your own set of keys. Feel free to contact chromium@gentoo.org
 	# for more info.
-	myconf+=" -Dgoogle_api_key=AIzaSyDEAOvatFo0eTgsV_ZlEzx0ObmepsMzfAc
+	myconf_gyp+=" -Dgoogle_api_key=AIzaSyDEAOvatFo0eTgsV_ZlEzx0ObmepsMzfAc
 		-Dgoogle_default_client_id=329227923882.apps.googleusercontent.com
 		-Dgoogle_default_client_secret=vgKG0NNv7GoDpbtoFNLxCUXu"
 
@@ -513,32 +482,33 @@
 		local CTARGET=${CTARGET:-${CHOST}}
 		if [[ $(tc-is-softfloat) == "no" ]]; then
 
-			myconf+=" -Darm_float_abi=hard"
+			myconf_gyp+=" -Darm_float_abi=hard"
 		fi
 		filter-flags "-mfpu=*"
-		use neon || myconf+=" -Darm_fpu=${ARM_FPU:-vfpv3-d16}"
+		use neon || myconf_gyp+=" -Darm_fpu=${ARM_FPU:-vfpv3-d16}"
 
 		if [[ ${CTARGET} == armv[78]* ]]; then
-			myconf+=" -Darmv7=1"
+			myconf_gyp+=" -Darmv7=1"
 		else
-			myconf+=" -Darmv7=0"
+			myconf_gyp+=" -Darmv7=0"
 		fi
-		myconf+=" -Dsysroot=
+		myconf_gyp+=" -Dsysroot=
 			$(gyp_use neon arm_neon)
 			-Ddisable_nacl=1"
 	else
 		die "Failed to determine target arch, got '$myarch'."
 	fi
 
-	myconf+=" -Dtarget_arch=${target_arch}"
+	myconf_gyp+=" -Dtarget_arch=${target_arch}"
 
 	# Make sure that -Werror doesn't get added to CFLAGS by the build system.
 	# Depending on GCC version the warnings are different and we don't want
 	# the build to fail because of that.
-	myconf+=" -Dwerror="
+	myconf_gyp+=" -Dwerror="
+	myconf_gn+=" treat_warnings_as_errors=false"
 
 	# Disable fatal linker warnings, bug 506268.
-	myconf+=" -Ddisable_fatal_linker_warnings=1"
+	myconf_gyp+=" -Ddisable_fatal_linker_warnings=1"
 
 	# Avoid CFLAGS problems, bug #352457, bug #390147.
 	if ! use custom-cflags; then
@@ -549,6 +519,7 @@
 		if use x86; then
 			filter-flags "-g*"
 		fi
+
 		# Prevent libvpx build failures. Bug 530248, 544702, 546984.
 		if [[ ${myarch} == amd64 || ${myarch} == x86 ]]; then
 			filter-flags -mno-mmx -mno-sse2 -mno-ssse3 -mno-sse4.1 -mno-avx -mno-avx2
@@ -570,27 +541,35 @@
 	export TMPDIR="${WORKDIR}/temp"
 	mkdir -p -m 755 "${TMPDIR}" || die
 
-	local build_ffmpeg_args=""
-	if use pic && [[ "${ffmpeg_target_arch}" == "ia32" ]]; then
-		build_ffmpeg_args+=" --disable-asm"
-	fi
+	# TODO: also do this for GN bundled ffmpeg build.
+	if ! use system-ffmpeg && ! use gn; then
+		local build_ffmpeg_args=""
+		if use pic && [[ "${ffmpeg_target_arch}" == "ia32" ]]; then
+			build_ffmpeg_args+=" --disable-asm"
+		fi
 
-	# Re-configure bundled ffmpeg. See bug #491378 for example reasons.
-	einfo "Configuring bundled ffmpeg..."
-	pushd third_party/ffmpeg > /dev/null || die
-	chromium/scripts/build_ffmpeg.py linux ${ffmpeg_target_arch} \
-		--branding ${ffmpeg_branding} -- ${build_ffmpeg_args} || die
-	chromium/scripts/copy_config.sh || die
-	chromium/scripts/generate_gyp.py || die
-	popd > /dev/null || die
+		# Re-configure bundled ffmpeg. See bug #491378 for example reasons.
+		einfo "Configuring bundled ffmpeg..."
+		pushd third_party/ffmpeg > /dev/null || die
+		chromium/scripts/build_ffmpeg.py linux ${ffmpeg_target_arch} \
+			--branding ${ffmpeg_branding} -- ${build_ffmpeg_args} || die
+		chromium/scripts/copy_config.sh || die
+		chromium/scripts/generate_gyp.py || die
+		popd > /dev/null || die
+	fi
 
 	third_party/libaddressinput/chromium/tools/update-strings.py || die
 
 	touch chrome/test/data/webui/i18n_process_css_test.html || die
 
 	einfo "Configuring Chromium..."
-	build/linux/unbundle/replace_gyp_files.py ${myconf} || die
-	egyp_chromium ${myconf} || die
+	if use gn; then
+		tools/gn/bootstrap/bootstrap.py -v --gn-gen-args "${myconf_gn}" || die
+		out/Release/gn gen --args="${myconf_gn}" out/Release || die
+	else
+		build/linux/unbundle/replace_gyp_files.py ${myconf_gyp} || die
+		egyp_chromium ${myconf_gyp} || die
+	fi
 }
 
 eninja() {
@@ -613,9 +592,11 @@
 src_compile() {
 	local ninja_targets="chrome chrome_sandbox chromedriver"
 
-	# Build mksnapshot and pax-mark it.
-	eninja -C out/Release mksnapshot || die
-	pax-mark m out/Release/mksnapshot
+	if ! use gn; then
+		# Build mksnapshot and pax-mark it.
+		eninja -C out/Release mksnapshot || die
+		pax-mark m out/Release/mksnapshot
+	fi
 
 	# Even though ninja autodetects number of CPUs, we respect
 	# user's options, for debugging with -j 1 or any other reason.
@@ -632,6 +613,7 @@
 	fperms 4755 "${CHROMIUM_HOME}/chrome-sandbox"
 
 	doexe out/Release/chromedriver || die
+	use widevine && doexe out/Release/libwidevinecdmadapter.so
 
 	# if ! use arm; then
 	#	doexe out/Release/nacl_helper{,_bootstrap} || die
@@ -672,6 +654,8 @@
 	doins out/Release/*.bin || die
 	doins out/Release/*.pak || die
 
+	doins out/Release/icudtl.dat || die
+
 	doins -r out/Release/locales || die
 	doins -r out/Release/resources || die
 
