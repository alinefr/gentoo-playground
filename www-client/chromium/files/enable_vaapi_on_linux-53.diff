--- ./media/media_gpu.gypi.orig
+++ ./media/media_gpu.gypi
@@ -818,7 +818,7 @@
         },
       ],
     }],
-    ['chromeos==1', {
+    ['chromeos==1 or desktop_linux==1', {
       'sources': [
         'media/gpu/accelerated_video_decoder.h',
         'media/gpu/h264_decoder.cc',
@@ -867,7 +867,7 @@
         'media/gpu/tegra_v4l2_device.h',
       ],
     }],
-    ['target_arch != "arm" and chromeos == 1', {
+    ['(target_arch != "arm" and chromeos == 1) or desktop_linux == 1', {
       'dependencies': [
         '../media/media.gyp:media',
         '../third_party/libyuv/libyuv.gyp:libyuv',
--- ./content/content_gpu.gypi.orig
+++ ./content/content_gpu.gypi
@@ -36,7 +36,7 @@
         ],
       },
     }],
-    ['target_arch!="arm" and chromeos == 1', {
+    ['(target_arch!="arm" and chromeos == 1) or desktop_linux == 1', {
       'include_dirs': [
         '<(DEPTH)/third_party/libva',
       ],
--- ./content/public/common/content_switches.cc.orig
+++ ./content/public/common/content_switches.cc
@@ -928,7 +928,7 @@
 // Disable web audio API.
 const char kDisableWebAudio[]               = "disable-webaudio";
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
 // Disables panel fitting (used for mirror mode).
 const char kDisablePanelFitting[]           = "disable-panel-fitting";
 
--- ./content/public/common/content_switches.h.orig
+++ ./content/public/common/content_switches.h
@@ -265,7 +265,7 @@
 
 CONTENT_EXPORT extern const char kDisableWebAudio[];
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
 CONTENT_EXPORT extern const char kDisablePanelFitting[];
 CONTENT_EXPORT extern const char kDisableVaapiAcceleratedVideoEncode[];
 #endif
--- ./content/common/sandbox_linux/bpf_gpu_policy_linux.cc.orig
+++ ./content/common/sandbox_linux/bpf_gpu_policy_linux.cc
@@ -21,6 +21,8 @@
 #include "base/logging.h"
 #include "base/memory/scoped_ptr.h"
 #include "build/build_config.h"
+// Auto-generated for dlopen libva libraries
+#include "out/Release/gen/va/media/gpu/va_stubs.h"
 #include "content/common/sandbox_linux/sandbox_bpf_base_policy_linux.h"
 #include "content/common/sandbox_linux/sandbox_seccomp_bpf_linux.h"
 #include "content/common/set_process_title.h"
@@ -31,6 +33,8 @@
 #include "sandbox/linux/syscall_broker/broker_file_permission.h"
 #include "sandbox/linux/syscall_broker/broker_process.h"
 #include "sandbox/linux/system_headers/linux_syscalls.h"
+#include "third_party/libva/va/va.h"
+#include "third_party/libva/va/va_x11.h"
 
 using sandbox::arch_seccomp_data;
 using sandbox::bpf_dsl::Allow;
@@ -40,6 +44,11 @@
 using sandbox::syscall_broker::BrokerProcess;
 using sandbox::SyscallSets;
 
+using media_gpu::kModuleVa;
+using media_gpu::kModuleVa_x11;
+using media_gpu::InitializeStubs;
+using media_gpu::StubPathMap;
+
 namespace content {
 
 namespace {
@@ -94,7 +103,7 @@
 
 bool IsAcceleratedVaapiVideoEncodeEnabled() {
   bool accelerated_encode_enabled = false;
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
   const base::CommandLine& command_line =
       *base::CommandLine::ForCurrentProcess();
   accelerated_encode_enabled =
@@ -299,27 +308,41 @@
     // inside the sandbox, so preload them now.
     if (IsAcceleratedVaapiVideoEncodeEnabled() ||
         IsAcceleratedVideoDecodeEnabled()) {
-      const char* I965DrvVideoPath = NULL;
-      const char* I965HybridDrvVideoPath = NULL;
+      VLOG(1) << "Attempting to enable hardware video acceleration.";
+      StubPathMap paths;
+      paths[kModuleVa].push_back("libva.so.1");
+      paths[kModuleVa_x11].push_back("libva-x11.so.1");
+      if (!InitializeStubs(paths)) {
+        VLOG(1) << "Failed to initialize stubs";
+        return false;
+      }
 
-      if (IsArchitectureX86_64()) {
-        I965DrvVideoPath = "/usr/lib64/va/drivers/i965_drv_video.so";
-        I965HybridDrvVideoPath = "/usr/lib64/va/drivers/hybrid_drv_video.so";
-      } else if (IsArchitectureI386()) {
-        I965DrvVideoPath = "/usr/lib/va/drivers/i965_drv_video.so";
+      // libva drivers won't get loaded even above two libraries get dlopened.
+      // Thus, libva calls will fail after post sandbox stage.
+      //
+      // To get the va driver loaded before sandboxing, upstream simply dlopen
+      // the hard-coded va driver path because ChromeOS is the only platform
+      // that Google want to support libva.
+      //
+      // While generic linux distros ship va driver as anywhere they want.
+      // Fortunately, the va driver will be loadded when vaInitialize() get
+      // called.
+      // So the following code is to call vaInitialize() before sandboxing.
+      Display* x_display = XOpenDisplay(NULL);
+      VADisplay va_display = vaGetDisplay(x_display);
+      if (!vaDisplayIsValid(va_display)) {
+        VLOG(1) << "Failed to call vaGetDisplay()";
+        return false;
       }
 
-      dlopen(I965DrvVideoPath, RTLD_NOW|RTLD_GLOBAL|RTLD_NODELETE);
-      if (I965HybridDrvVideoPath)
-        dlopen(I965HybridDrvVideoPath, RTLD_NOW|RTLD_GLOBAL|RTLD_NODELETE);
-      dlopen("libva.so.1", RTLD_NOW|RTLD_GLOBAL|RTLD_NODELETE);
-#if defined(USE_OZONE)
-      dlopen("libva-drm.so.1", RTLD_NOW|RTLD_GLOBAL|RTLD_NODELETE);
-#elif defined(USE_X11)
-      dlopen("libva-x11.so.1", RTLD_NOW|RTLD_GLOBAL|RTLD_NODELETE);
-#endif
-    }
-  }
+      int major_version, minor_version;
+      if (vaInitialize(va_display, &major_version, &minor_version)
+          != VA_STATUS_SUCCESS) {
+        VLOG(1) << "Failed to call vaInitialize()";
+        return false;
+      }
+    }  // end of IsAcceleratedVaapiVideoEncodeEnabled() || IsAcceleratedVideoDecodeEnabled()
+  }  // end of IsArchitectureX86_64() || IsArchitectureI386()
 
   return true;
 }
--- ./media/gpu/vaapi_wrapper.cc.orig
+++ ./media/gpu/vaapi_wrapper.cc
@@ -142,7 +142,7 @@
     VAProfile va_profile,
     const base::Closure& report_error_to_uma_cb) {
   if (!profile_infos_.Get().IsProfileSupported(mode, va_profile)) {
-    DVLOG(1) << "Unsupported va_profile: " << va_profile;
+    VLOG(1) << "Unsupported va_profile: " << va_profile;
     return nullptr;
   }
 
@@ -385,7 +385,7 @@
   if (std::find(supported_entrypoints.begin(),
                 supported_entrypoints.end(),
                 entrypoint) == supported_entrypoints.end()) {
-    DVLOG(1) << "Unsupported entrypoint";
+    VLOG(1) << "Unsupported entrypoint";
     return false;
   }
   return true;
@@ -409,8 +409,8 @@
     if (attribs[i].type != required_attribs[i].type ||
         (attribs[i].value & required_attribs[i].value) !=
             required_attribs[i].value) {
-      DVLOG(1) << "Unsupported value " << required_attribs[i].value
-               << " for attribute type " << required_attribs[i].type;
+      VLOG(1) << "Unsupported value " << required_attribs[i].value
+              << " for attribute type " << required_attribs[i].type;
       return false;
     }
   }
--- ./media/gpu/ipc/service/gpu_video_encode_accelerator.cc~	2016-06-09 23:03:20.000000000 +0100
+++ ./media/gpu/ipc/service/gpu_video_encode_accelerator.cc	2016-06-17 16:42:57.330544517 +0100
@@ -24,7 +24,7 @@
 #include "media/gpu/gpu_video_accelerator_util.h"
 #include "media/gpu/ipc/common/media_messages.h"
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
 #if defined(USE_V4L2_CODEC)
 #include "media/gpu/v4l2_video_encode_accelerator.h"
 #endif
@@ -197,10 +197,10 @@
 GpuVideoEncodeAccelerator::CreateVEAFps(
     const gpu::GpuPreferences& gpu_preferences) {
   std::vector<GpuVideoEncodeAccelerator::CreateVEAFp> create_vea_fps;
-#if defined(OS_CHROMEOS) && defined(USE_V4L2_CODEC)
+#if (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(USE_V4L2_CODEC)
   create_vea_fps.push_back(&GpuVideoEncodeAccelerator::CreateV4L2VEA);
 #endif
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
   if (!gpu_preferences.disable_vaapi_accelerated_video_encode)
     create_vea_fps.push_back(&GpuVideoEncodeAccelerator::CreateVaapiVEA);
 #endif
@@ -214,7 +214,7 @@
   return create_vea_fps;
 }
 
-#if defined(OS_CHROMEOS) && defined(USE_V4L2_CODEC)
+#if (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(USE_V4L2_CODEC)
 // static
 std::unique_ptr<media::VideoEncodeAccelerator>
 GpuVideoEncodeAccelerator::CreateV4L2VEA() {
@@ -226,7 +226,7 @@
 }
 #endif
 
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
 // static
 std::unique_ptr<media::VideoEncodeAccelerator>
 GpuVideoEncodeAccelerator::CreateVaapiVEA() {
--- ./media/gpu/ipc/service/gpu_video_decode_accelerator.cc.orig	2016-06-17 16:24:04.944461921 +0100
+++ ./media/gpu/ipc/service/gpu_video_decode_accelerator.cc	2016-06-17 16:45:06.298700232 +0100
@@ -58,7 +58,7 @@
   return true;
 }
 
-#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_MACOSX)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_MACOSX) || defined(OS_LINUX)
 static bool BindImage(const base::WeakPtr<gpu::GpuCommandBufferStub>& stub,
                       uint32_t client_texture_id,
                       uint32_t texture_target,
@@ -171,7 +171,7 @@
   get_gl_context_cb_ = base::Bind(&GetGLContext, stub_->AsWeakPtr());
   make_context_current_cb_ =
       base::Bind(&MakeDecoderContextCurrent, stub_->AsWeakPtr());
-#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_MACOSX)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_MACOSX) || defined(OS_LINUX)
   bind_image_cb_ = base::Bind(&BindImage, stub_->AsWeakPtr());
 #endif
   get_gles2_decoder_cb_ = base::Bind(&GetGLES2Decoder, stub_->AsWeakPtr());
--- ./media/gpu/jpeg_decode_accelerator_unittest.cc~	2016-06-09 23:03:20.000000000 +0100
+++ ./media/gpu/jpeg_decode_accelerator_unittest.cc	2016-06-17 16:48:03.653954370 +0100
@@ -31,7 +31,7 @@
 #include "third_party/libyuv/include/libyuv.h"
 #include "ui/gfx/codec/jpeg_codec.h"
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
 #if defined(USE_V4L2_CODEC)
 #include "media/gpu/v4l2_device.h"
 #include "media/gpu/v4l2_jpeg_decode_accelerator.h"
@@ -135,10 +135,10 @@
 JpegClient::~JpegClient() {}
 
 void JpegClient::CreateJpegDecoder() {
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
   decoder_.reset(
       new VaapiJpegDecodeAccelerator(base::ThreadTaskRunnerHandle::Get()));
-#elif defined(OS_CHROMEOS) && defined(USE_V4L2_CODEC)
+#elif (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(USE_V4L2_CODEC)
   scoped_refptr<V4L2Device> device =
       V4L2Device::Create(V4L2Device::kJpegDecoder);
   if (!device.get()) {
@@ -575,7 +575,7 @@
       continue;
     LOG(FATAL) << "Unexpected switch: " << it->first << ":" << it->second;
   }
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
   media::VaapiWrapper::PreSandboxInitialization();
 #endif
 
--- ./media/gpu/video_decode_accelerator_unittest.cc~	2016-06-09 23:03:20.000000000 +0100
+++ ./media/gpu/video_decode_accelerator_unittest.cc	2016-06-17 16:55:22.051638304 +0100
@@ -64,16 +64,16 @@
 #if defined(OS_WIN)
 #include "base/win/windows_version.h"
 #include "media/gpu/dxva_video_decode_accelerator_win.h"
-#elif defined(OS_CHROMEOS)
+#elif defined(OS_CHROMEOS) || defined(OS_LINUX)
 #if defined(USE_V4L2_CODEC)
 #include "media/gpu/v4l2_device.h"
 #include "media/gpu/v4l2_slice_video_decode_accelerator.h"
 #include "media/gpu/v4l2_video_decode_accelerator.h"
 #endif
-#if defined(ARCH_CPU_X86_FAMILY)
+#if defined(ARCH_CPU_X86_FAMILY) || defined(OS_LINUX)
 #include "media/gpu/vaapi_video_decode_accelerator.h"
 #include "media/gpu/vaapi_wrapper.h"
-#endif  // defined(ARCH_CPU_X86_FAMILY)
+#endif  // defined(ARCH_CPU_X86_FAMILY) || defined(OS_LINUX)
 #else
 #error The VideoAccelerator tests are not supported on this platform.
 #endif  // OS_WIN
@@ -1779,7 +1779,7 @@
   ui::OzonePlatform::InitializeForUI();
 #endif
 
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
   media::VaapiWrapper::PreSandboxInitialization();
 #endif
 
--- ./media/media.gyp.orig	2016-06-09 23:03:20.000000000 +0100
+++ ./media/media.gyp	2016-06-17 17:16:00.082827626 +0100
@@ -755,7 +755,7 @@
           ],
         }],
         # For VaapiVideoEncodeAccelerator.
-        ['target_arch != "arm" and chromeos == 1', {
+        ['(target_arch != "arm" and chromeos == 1) or desktop_linux == 1', {
           'sources': [
             'filters/h264_bitstream_buffer.cc',
             'filters/h264_bitstream_buffer.h',
@@ -1356,7 +1356,7 @@
             }]
            ],
         }],
-        ['target_arch != "arm" and chromeos == 1 and use_x11 == 1', {
+        ['((target_arch != "arm" and chromeos == 1) or desktop_linux == 1) and use_x11 == 1', {
           'sources': [
             'filters/h264_bitstream_buffer_unittest.cc',
           ],
@@ -2124,7 +2124,7 @@
         },
       ],
     }],
-    ['chromeos==1', {
+    ['chromeos==1 or desktop_linux==1', {
       'targets': [
         {
           'target_name': 'jpeg_decode_accelerator_unittest',
@@ -2151,7 +2151,7 @@
         }
       ]
     }],
-    ['chromeos==1 or OS=="mac"', {
+    ['chromeos==1 or desktop_linux==1 or OS=="mac"', {
       'targets': [
         {
           'target_name': 'video_encode_accelerator_unittest',
@@ -2197,7 +2197,7 @@
         }
       ]
     }],
-    ['chromeos==1 or OS=="win" or OS=="android"', {
+    ['chromeos==1 or desktop_linux==1 or OS=="win" or OS=="android"', {
       'targets': [
           {
             # GN: //media/gpu:video_decode_accelerator_unittest
@@ -2290,7 +2290,7 @@
       ],
     }],
 
-    ['chromeos==1 and target_arch != "arm"', {
+    ['(chromeos==1 and target_arch != "arm") or desktop_linux==1', {
       'targets': [
           {
             'target_name': 'vaapi_jpeg_decoder_unittest',
--- ./content/common/gpu_host_messages.h~	2016-06-09 23:03:18.000000000 +0100
+++ ./content/common/gpu_host_messages.h	2016-06-17 22:15:58.757183430 +0100
@@ -77,7 +77,7 @@
   IPC_STRUCT_TRAITS_MEMBER(in_process_gpu)
   IPC_STRUCT_TRAITS_MEMBER(ui_prioritize_in_gpu_process)
   IPC_STRUCT_TRAITS_MEMBER(disable_accelerated_video_decode)
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
   IPC_STRUCT_TRAITS_MEMBER(disable_vaapi_accelerated_video_encode)
 #endif
 #if defined(ENABLE_WEBRTC)
--- ./gpu/command_buffer/service/gpu_preferences.h~	2016-06-09 23:03:19.000000000 +0100
+++ ./gpu/command_buffer/service/gpu_preferences.h	2016-06-17 22:15:59.210520207 +0100
@@ -37,7 +37,7 @@
   // Disables hardware acceleration of video decode, where available.
   bool disable_accelerated_video_decode = false;
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
   // Disables VA-API accelerated video encode.
   bool disable_vaapi_accelerated_video_encode = false;
 #endif
--- ./content/gpu/gpu_main.cc~	2016-06-09 23:03:18.000000000 +0100
+++ ./content/gpu/gpu_main.cc	2016-06-18 10:47:24.406339016 +0100
@@ -75,7 +75,7 @@
 #include "content/common/sandbox_mac.h"
 #endif
 
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
 #include "media/gpu/vaapi_wrapper.h"
 #endif
 
@@ -253,7 +253,7 @@
   GetGpuInfoFromCommandLine(gpu_info, command_line);
   gpu_info.in_process_gpu = false;
 
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
   media::VaapiWrapper::PreSandboxInitialization();
 #endif
 
--- ./media/media_gpu.gypi~	2016-06-17 23:04:16.000000000 +0100
+++ ./media/media_gpu.gypi	2016-06-18 10:43:14.664270630 +0100
@@ -125,7 +125,7 @@
         'gpu/android_video_encode_accelerator.h',
       ],
     }],
-    ['use_v4lplugin==1 and chromeos==1', {
+    ['use_v4lplugin==1 and (chromeos==1 or desktop_linux==1)', {
       'direct_dependent_settings': {
         'defines': [
           'USE_LIBV4L2'
@@ -191,7 +191,7 @@
         'gpu/vp9_picture.h',
       ],
     }],
-    ['chromeos==1 and use_v4l2_codec==1', {
+    ['(chromeos==1 or desktop_linux==1) and use_v4l2_codec==1', {
       'direct_dependent_settings': {
         'defines': [
           'USE_V4L2_CODEC'
--- ./gpu/config/software_rendering_list_json.cc.orig	2016-06-22 14:36:34.507208258 +0100
+++ ./gpu/config/software_rendering_list_json.cc	2016-06-22 14:41:48.799342593 +0100
@@ -431,17 +431,6 @@
       ]
     },
     {
-      "id": 48,
-      "description": "Accelerated video decode is unavailable on Linux",
-      "cr_bugs": [137247],
-      "os": {
-        "type": "linux"
-      },
-      "features": [
-        "accelerated_video_decode"
-      ]
-    },
-    {
       "id": 50,
       "description": "Disable VMware software renderer on older Mesa",
       "cr_bugs": [145531, 332596, 571899],
--- ./media/gpu/BUILD.gn.orig	2016-06-09 23:03:20.000000000 +0100
+++ ./media/gpu/BUILD.gn	2016-06-22 14:40:49.442272837 +0100
@@ -12,7 +12,7 @@
   import("//build/config/mac/mac_sdk.gni")
 }
 
-if (is_chromeos && current_cpu != "arm") {
+if ((is_chromeos && current_cpu != "arm") || is_desktop_linux) {
   action("libva_generate_stubs") {
     extra_header = "va_stub_header.fragment"
 
@@ -54,7 +54,7 @@
   }
 }
 
-if (is_chromeos && use_v4lplugin) {
+if ((is_chromeos || is_desktop_linux) && use_v4lplugin) {
   action("libv4l2_generate_stubs") {
     extra_header = "v4l2_stub_header.fragment"
 
@@ -128,7 +128,7 @@
 
 config("gpu_config") {
   defines = []
-  if (is_chromeos && use_v4lplugin) {
+  if ((is_chromeos || is_desktop_linux) && use_v4lplugin) {
     defines += [ "USE_LIBV4L2" ]
   }
 }
@@ -230,7 +230,7 @@
     }
   }
 
-  if (is_chromeos) {
+  if (is_chromeos || is_desktop_linux) {
     sources += [
       "accelerated_video_decoder.h",
       "h264_decoder.cc",
@@ -354,7 +354,7 @@
   }
 }
 
-if (is_win || is_android || is_chromeos) {
+if (is_win || is_android || is_chromeos || is_desktop_linux) {
   test("video_decode_accelerator_unittest") {
     sources = [
       "video_accelerator_unittest_helpers.h",
@@ -376,7 +376,7 @@
     ]
 
     configs += [ "//third_party/khronos:khronos_headers" ]
-    if (is_chromeos && current_cpu != "arm") {
+    if ((is_chromeos && target_cpu != "arm") || is_desktop_linux) {
       configs += [ "//third_party/libva:libva_config" ]
     }
 
@@ -423,7 +423,7 @@
   }
 }
 
-if (is_chromeos || is_mac) {
+if (is_chromeos || is_desktop_linux || is_mac) {
   test("video_encode_accelerator_unittest") {
     deps = [
       "//base",
--- ./media/gpu/ipc/service/gpu_video_encode_accelerator.h.orig	2016-07-04 09:33:19.878784332 +0100
+++ ./media/gpu/ipc/service/gpu_video_encode_accelerator.h	2016-07-04 09:37:34.911391168 +0100
@@ -80,10 +80,10 @@
   // platform.
   static std::vector<CreateVEAFp> CreateVEAFps(
       const gpu::GpuPreferences& gpu_preferences);
-#if defined(OS_CHROMEOS) && defined(USE_V4L2_CODEC)
+#if (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(USE_V4L2_CODEC)
   static std::unique_ptr<VideoEncodeAccelerator> CreateV4L2VEA();
 #endif
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
   static std::unique_ptr<VideoEncodeAccelerator> CreateVaapiVEA();
 #endif
 #if defined(OS_ANDROID) && defined(ENABLE_WEBRTC)
--- ./media/gpu/gpu_video_decode_accelerator_factory_impl.cc.orig	2016-06-22 21:52:13.000000000 +0100
+++ ./media/gpu/gpu_video_decode_accelerator_factory_impl.cc	2016-07-04 09:41:47.018838925 +0100
@@ -14,7 +14,7 @@
 #include "media/gpu/dxva_video_decode_accelerator_win.h"
 #elif defined(OS_MACOSX)
 #include "media/gpu/vt_video_decode_accelerator_mac.h"
-#elif defined(OS_CHROMEOS)
+#elif defined(OS_CHROMEOS) || defined(OS_LINUX)
 #if defined(USE_V4L2_CODEC)
 #include "media/gpu/v4l2_device.h"
 #include "media/gpu/v4l2_slice_video_decode_accelerator.h"
@@ -79,7 +79,7 @@
 #if defined(OS_WIN)
   capabilities.supported_profiles =
       DXVAVideoDecodeAccelerator::GetSupportedProfiles();
-#elif defined(OS_CHROMEOS)
+#elif defined(OS_CHROMEOS) || defined(OS_LINUX)
   VideoDecodeAccelerator::SupportedProfiles vda_profiles;
 #if defined(USE_V4L2_CODEC)
   vda_profiles = V4L2VideoDecodeAccelerator::GetSupportedProfiles();
@@ -89,7 +89,7 @@
   GpuVideoAcceleratorUtil::InsertUniqueDecodeProfiles(
       vda_profiles, &capabilities.supported_profiles);
 #endif
-#if defined(ARCH_CPU_X86_FAMILY)
+#if defined(ARCH_CPU_X86_FAMILY) || defined(OS_LINUX)
   vda_profiles = VaapiVideoDecodeAccelerator::GetSupportedProfiles();
   GpuVideoAcceleratorUtil::InsertUniqueDecodeProfiles(
       vda_profiles, &capabilities.supported_profiles);
@@ -126,11 +126,11 @@
 #if defined(OS_WIN)
     &GpuVideoDecodeAcceleratorFactoryImpl::CreateDXVAVDA,
 #endif
-#if defined(OS_CHROMEOS) && defined(USE_V4L2_CODEC)
+#if (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(USE_V4L2_CODEC)
     &GpuVideoDecodeAcceleratorFactoryImpl::CreateV4L2VDA,
     &GpuVideoDecodeAcceleratorFactoryImpl::CreateV4L2SVDA,
 #endif
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
     &GpuVideoDecodeAcceleratorFactoryImpl::CreateVaapiVDA,
 #endif
 #if defined(OS_MACOSX)
@@ -166,7 +166,7 @@
 }
 #endif
 
-#if defined(OS_CHROMEOS) && defined(USE_V4L2_CODEC)
+#if (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(USE_V4L2_CODEC)
 std::unique_ptr<VideoDecodeAccelerator>
 GpuVideoDecodeAcceleratorFactoryImpl::CreateV4L2VDA(
     const gpu::GpuPreferences& gpu_preferences) const {
@@ -194,7 +194,7 @@
 }
 #endif
 
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
 std::unique_ptr<VideoDecodeAccelerator>
 GpuVideoDecodeAcceleratorFactoryImpl::CreateVaapiVDA(
     const gpu::GpuPreferences& gpu_preferences) const {
--- ./media/gpu/gpu_video_decode_accelerator_factory_impl.h.orig	2016-07-04 09:33:19.878784332 +0100
+++ ./media/gpu/gpu_video_decode_accelerator_factory_impl.h	2016-07-04 09:42:48.772518672 +0100
@@ -93,7 +93,7 @@
       const gpu::GpuDriverBugWorkarounds& workarounds,
       const gpu::GpuPreferences& gpu_preferences) const;
 #endif
-#if defined(OS_CHROMEOS) && defined(USE_V4L2_CODEC)
+#if (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(USE_V4L2_CODEC)
   std::unique_ptr<VideoDecodeAccelerator> CreateV4L2VDA(
       const gpu::GpuDriverBugWorkarounds& workarounds,
       const gpu::GpuPreferences& gpu_preferences) const;
@@ -101,7 +101,7 @@
       const gpu::GpuDriverBugWorkarounds& workarounds,
       const gpu::GpuPreferences& gpu_preferences) const;
 #endif
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
   std::unique_ptr<VideoDecodeAccelerator> CreateVaapiVDA(
       const gpu::GpuDriverBugWorkarounds& workarounds,
       const gpu::GpuPreferences& gpu_preferences) const;
--- ./media/gpu/video_encode_accelerator_unittest.cc.orig	2016-06-22 21:52:13.000000000 +0100
+++ ./media/gpu/video_encode_accelerator_unittest.cc	2016-07-04 09:44:06.906357543 +0100
@@ -47,11 +47,11 @@
 #include "media/video/video_encode_accelerator.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
 #if defined(ARCH_CPU_ARMEL) || (defined(USE_OZONE) && defined(USE_V4L2_CODEC))
 #include "media/gpu/v4l2_video_encode_accelerator.h"
 #endif
-#if defined(ARCH_CPU_X86_FAMILY)
+#if defined(ARCH_CPU_X86_FAMILY) || defined(OS_LINUX)
 #include "media/gpu/vaapi_video_encode_accelerator.h"
 #include "media/gpu/vaapi_wrapper.h"
 // Status has been defined as int in Xlib.h.
@@ -1030,7 +1030,7 @@
 
 std::unique_ptr<VideoEncodeAccelerator> VEAClient::CreateV4L2VEA() {
   std::unique_ptr<VideoEncodeAccelerator> encoder;
-#if defined(OS_CHROMEOS) && (defined(ARCH_CPU_ARMEL) || \
+#if ((defined(OS_CHROMEOS) && defined(ARCH_CPU_ARMEL)) || defined(OS_LINUX)) && ( \
                              (defined(USE_OZONE) && defined(USE_V4L2_CODEC)))
   scoped_refptr<V4L2Device> device = V4L2Device::Create(V4L2Device::kEncoder);
   if (device)
@@ -1041,7 +1041,7 @@
 
 std::unique_ptr<VideoEncodeAccelerator> VEAClient::CreateVaapiVEA() {
   std::unique_ptr<VideoEncodeAccelerator> encoder;
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
   encoder.reset(new VaapiVideoEncodeAccelerator());
 #endif
   return encoder;
@@ -1771,7 +1771,7 @@
     LOG(FATAL) << "--measure_latency requires --run_at_fps enabled to work.";
   }
 
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
   media::VaapiWrapper::PreSandboxInitialization();
 #endif
 
