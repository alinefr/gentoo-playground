diff -aur chromium-53.0.2785.89.orig/content/common/BUILD.gn chromium-53.0.2785.89/content/common/BUILD.gn
--- chromium-53.0.2785.89.orig/content/common/BUILD.gn	2016-08-31 15:03:31.000000000 -0700
+++ chromium-53.0.2785.89/content/common/BUILD.gn	2016-09-02 01:35:26.224998192 -0700
@@ -12,6 +12,49 @@
   import("//build/config/mac/mac_sdk.gni")
 }

+if ((is_desktop_linux || is_chromeos) && current_cpu != "arm") {
+  action("libva_generate_stubs") {
+    extra_header = "../../media/gpu/va_stub_header.fragment"
+
+    script = "../../tools/generate_stubs/generate_stubs.py"
+    sources = [
+      "../../media/gpu/va.sigs",
+    ]
+    inputs = [
+      extra_header,
+    ]
+    sources += [ "../../media/gpu/va_x11.sigs" ]
+    if (use_ozone) {
+      sources += [
+        "../../media/gpu/va_drm.sigs",
+        "va_wayland.sigs",
+      ]
+    }
+    stubs_filename_root = "va_stubs"
+
+    outputs = [
+      "$target_gen_dir/$stubs_filename_root.cc",
+      "$target_gen_dir/$stubs_filename_root.h",
+    ]
+    args = [
+      "-i",
+      rebase_path("$target_gen_dir", root_build_dir),
+      "-o",
+      rebase_path("$target_gen_dir", root_build_dir),
+      "-t",
+      "posix_stubs",
+      "-e",
+      rebase_path(extra_header, root_build_dir),
+      "-s",
+      stubs_filename_root,
+      "-p",
+      "content/common",
+    ]
+
+    args += rebase_path(sources, root_build_dir)
+  }
+}
+
 source_set("common") {
   # Targets external to content should always link to the public API.
   # In addition, targets outside of the content component (shell and tests)
@@ -183,6 +226,15 @@

   if (use_seccomp_bpf) {
     defines += [ "USE_SECCOMP_BPF" ]
+    if (current_cpu != "arm" && is_desktop_linux) {
+      sources += get_target_outputs(":libva_generate_stubs")
+      deps += [ ":libva_generate_stubs" ]
+      configs += [ "//third_party/libva:libva_config" ]
+      if (use_ozone) {
+        configs += [ "//build/config/linux:x11" ]
+        deps += [ "//third_party/wayland:wayland_client" ]
+      }
+    }
   } else {
     if (is_linux) {
       sources -= [
diff -urN /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/content/common/gpu_host_messages.h chromium-55.0.2859.0/content/common/gpu_host_messages.h
--- /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/content/common/gpu_host_messages.h	2016-09-13 23:03:12.000000000 +0100
+++ chromium-55.0.2859.0/content/common/gpu_host_messages.h	2016-09-17 00:05:51.929674277 +0100
@@ -66,7 +66,7 @@
   IPC_STRUCT_TRAITS_MEMBER(in_process_gpu)
   IPC_STRUCT_TRAITS_MEMBER(ui_prioritize_in_gpu_process)
   IPC_STRUCT_TRAITS_MEMBER(disable_accelerated_video_decode)
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
   IPC_STRUCT_TRAITS_MEMBER(disable_vaapi_accelerated_video_encode)
 #endif
 #if defined(ENABLE_WEBRTC)
diff -urN /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/content/gpu/gpu_main.cc chromium-55.0.2859.0/content/gpu/gpu_main.cc
--- /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/content/gpu/gpu_main.cc	2016-09-13 23:03:12.000000000 +0100
+++ chromium-55.0.2859.0/content/gpu/gpu_main.cc	2016-09-17 00:12:55.819627457 +0100
@@ -79,7 +79,7 @@
 #include "content/common/sandbox_mac.h"
 #endif
 
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
 #include "media/gpu/vaapi_wrapper.h"
 #endif
 
@@ -138,7 +138,7 @@
       (void)base::RandUint64();
     }
 
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
     media::VaapiWrapper::PreSandboxInitialization();
 #endif
 #if defined(OS_WIN)
diff -urN /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/content/public/common/content_switches.cc chromium-55.0.2859.0/content/public/common/content_switches.cc
--- /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/content/public/common/content_switches.cc	2016-09-13 23:03:12.000000000 +0100
+++ chromium-55.0.2859.0/content/public/common/content_switches.cc	2016-09-17 00:05:49.906321260 +0100
@@ -973,7 +973,7 @@
 const char kDisableAudioSupportForDesktopShare[] =
     "disable-audio-support-for-desktop-share";
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
 // Disables panel fitting (used for mirror mode).
 const char kDisablePanelFitting[]           = "disable-panel-fitting";
 
diff -urN /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/content/public/common/content_switches.h chromium-55.0.2859.0/content/public/common/content_switches.h
--- /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/content/public/common/content_switches.h	2016-09-13 23:03:12.000000000 +0100
+++ chromium-55.0.2859.0/content/public/common/content_switches.h	2016-09-17 00:05:50.126323400 +0100
@@ -283,7 +283,7 @@
 CONTENT_EXPORT extern const char kEnableOSKOverscroll[];
 #endif
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
 CONTENT_EXPORT extern const char kDisablePanelFitting[];
 CONTENT_EXPORT extern const char kDisableVaapiAcceleratedVideoEncode[];
 #endif
diff -urN /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/gpu/command_buffer/service/gpu_preferences.h chromium-55.0.2859.0/gpu/command_buffer/service/gpu_preferences.h
--- /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/gpu/command_buffer/service/gpu_preferences.h	2016-09-13 23:03:13.000000000 +0100
+++ chromium-55.0.2859.0/gpu/command_buffer/service/gpu_preferences.h	2016-09-17 00:05:52.593014063 +0100
@@ -46,7 +46,7 @@
   // Disables hardware acceleration of video decode, where available.
   bool disable_accelerated_video_decode = false;
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
   // Disables VA-API accelerated video encode.
   bool disable_vaapi_accelerated_video_encode = false;
 #endif
diff -urN /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/gpu/config/software_rendering_list_json.cc chromium-55.0.2859.0/gpu/config/software_rendering_list_json.cc
--- /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/gpu/config/software_rendering_list_json.cc	2016-09-13 23:03:13.000000000 +0100
+++ chromium-55.0.2859.0/gpu/config/software_rendering_list_json.cc	2016-09-17 00:05:53.193019900 +0100
@@ -415,17 +415,6 @@
       ]
     },
     {
-      "id": 48,
-      "description": "Accelerated video decode is unavailable on Linux",
-      "cr_bugs": [137247],
-      "os": {
-        "type": "linux"
-      },
-      "features": [
-        "accelerated_video_decode"
-      ]
-    },
-    {
       "id": 50,
       "description": "Disable VMware software renderer on older Mesa",
       "cr_bugs": [145531, 332596, 571899],
diff -urN /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/media/gpu/BUILD.gn chromium-55.0.2859.0/media/gpu/BUILD.gn
--- /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/media/gpu/BUILD.gn	2016-09-13 23:03:14.000000000 +0100
+++ chromium-55.0.2859.0/media/gpu/BUILD.gn	2016-09-17 00:18:29.268681759 +0100
@@ -12,7 +12,7 @@
   import("//build/config/mac/mac_sdk.gni")
 }
 
-if (is_chromeos && current_cpu != "arm") {
+if ((is_chromeos && current_cpu != "arm") || is_desktop_linux) {
   action("libva_generate_stubs") {
     extra_header = "va_stub_header.fragment"
 
@@ -54,7 +54,7 @@
   }
 }
 
-if (is_chromeos && use_v4lplugin) {
+if ((is_chromeos || is_desktop_linux) && use_v4lplugin) {
   action("libv4l2_generate_stubs") {
     extra_header = "v4l2_stub_header.fragment"
 
@@ -128,7 +128,7 @@
 
 config("gpu_config") {
   defines = []
-  if (is_chromeos && use_v4lplugin) {
+  if ((is_chromeos || is_desktop_linux) && use_v4lplugin) {
     defines += [ "USE_LIBV4L2" ]
   }
   if (is_chromeos && use_v4l2_codec) {
@@ -236,7 +236,7 @@
     }
   }
 
-  if (is_chromeos) {
+  if (is_chromeos || is_desktop_linux) {
     sources += [
       "accelerated_video_decoder.h",
       "h264_decoder.cc",
@@ -366,7 +366,7 @@
   }
 }
 
-if (is_win || is_android || is_chromeos) {
+if (is_win || is_android || is_chromeos || is_desktop_linux) {
   test("video_decode_accelerator_unittest") {
     sources = [
       "video_accelerator_unittest_helpers.h",
@@ -436,7 +436,7 @@
   }
 }
 
-if (is_chromeos || is_mac || is_win) {
+if (is_chromeos || is_desktop_linux || is_mac || is_win) {
   test("video_encode_accelerator_unittest") {
     deps = [
       "//base",
diff -urN /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/media/gpu/gpu_video_decode_accelerator_factory.cc chromium-55.0.2859.0/media/gpu/gpu_video_decode_accelerator_factory.cc
--- /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/media/gpu/gpu_video_decode_accelerator_factory.cc	2016-09-13 23:03:14.000000000 +0100
+++ chromium-55.0.2859.0/media/gpu/gpu_video_decode_accelerator_factory.cc	2016-09-17 00:44:15.447637494 +0100
@@ -14,7 +14,7 @@
 #include "media/gpu/dxva_video_decode_accelerator_win.h"
 #elif defined(OS_MACOSX)
 #include "media/gpu/vt_video_decode_accelerator_mac.h"
-#elif defined(OS_CHROMEOS)
+#elif defined(OS_CHROMEOS) || defined(OS_LINUX)
 #if defined(USE_V4L2_CODEC)
 #include "media/gpu/v4l2_device.h"
 #include "media/gpu/v4l2_slice_video_decode_accelerator.h"
@@ -79,7 +79,7 @@
 #if defined(OS_WIN)
   capabilities.supported_profiles =
       DXVAVideoDecodeAccelerator::GetSupportedProfiles(gpu_preferences);
-#elif defined(OS_CHROMEOS)
+#elif defined(OS_CHROMEOS) || defined(OS_LINUX)
   VideoDecodeAccelerator::SupportedProfiles vda_profiles;
 #if defined(USE_V4L2_CODEC)
   vda_profiles = V4L2VideoDecodeAccelerator::GetSupportedProfiles();
@@ -127,11 +127,11 @@
 #if defined(OS_WIN)
     &GpuVideoDecodeAcceleratorFactory::CreateDXVAVDA,
 #endif
-#if defined(OS_CHROMEOS) && defined(USE_V4L2_CODEC)
+#if (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(USE_V4L2_CODEC)
     &GpuVideoDecodeAcceleratorFactory::CreateV4L2VDA,
     &GpuVideoDecodeAcceleratorFactory::CreateV4L2SVDA,
 #endif
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
     &GpuVideoDecodeAcceleratorFactory::CreateVaapiVDA,
 #endif
 #if defined(OS_MACOSX)
@@ -169,7 +169,7 @@
 }
 #endif
 
-#if defined(OS_CHROMEOS) && defined(USE_V4L2_CODEC)
+#if (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(USE_V4L2_CODEC)
 std::unique_ptr<VideoDecodeAccelerator>
 GpuVideoDecodeAcceleratorFactory::CreateV4L2VDA(
     const gpu::GpuDriverBugWorkarounds& workarounds,
@@ -199,7 +199,7 @@
 }
 #endif
 
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
 std::unique_ptr<VideoDecodeAccelerator>
 GpuVideoDecodeAcceleratorFactory::CreateVaapiVDA(
     const gpu::GpuDriverBugWorkarounds& workarounds,
diff -urN /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/media/gpu/gpu_video_decode_accelerator_factory.h chromium-55.0.2859.0/media/gpu/gpu_video_decode_accelerator_factory.h
--- /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/media/gpu/gpu_video_decode_accelerator_factory.h	2016-09-13 23:03:14.000000000 +0100
+++ chromium-55.0.2859.0/media/gpu/gpu_video_decode_accelerator_factory.h	2016-09-17 00:45:30.534078997 +0100
@@ -90,7 +90,7 @@
       const gpu::GpuDriverBugWorkarounds& workarounds,
       const gpu::GpuPreferences& gpu_preferences) const;
 #endif
-#if defined(OS_CHROMEOS) && defined(USE_V4L2_CODEC)
+#if (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(USE_V4L2_CODEC)
   std::unique_ptr<VideoDecodeAccelerator> CreateV4L2VDA(
       const gpu::GpuDriverBugWorkarounds& workarounds,
       const gpu::GpuPreferences& gpu_preferences) const;
@@ -98,7 +98,7 @@
       const gpu::GpuDriverBugWorkarounds& workarounds,
       const gpu::GpuPreferences& gpu_preferences) const;
 #endif
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
   std::unique_ptr<VideoDecodeAccelerator> CreateVaapiVDA(
       const gpu::GpuDriverBugWorkarounds& workarounds,
       const gpu::GpuPreferences& gpu_preferences) const;
diff -urN /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/media/gpu/ipc/service/gpu_video_decode_accelerator.cc chromium-55.0.2859.0/media/gpu/ipc/service/gpu_video_decode_accelerator.cc
--- /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/media/gpu/ipc/service/gpu_video_decode_accelerator.cc	2016-09-13 23:03:14.000000000 +0100
+++ chromium-55.0.2859.0/media/gpu/ipc/service/gpu_video_decode_accelerator.cc	2016-09-17 00:05:51.142999957 +0100
@@ -58,7 +58,7 @@
   return true;
 }
 
-#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_MACOSX)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_MACOSX) || defined(OS_LINUX)
 static bool BindImage(const base::WeakPtr<gpu::GpuCommandBufferStub>& stub,
                       uint32_t client_texture_id,
                       uint32_t texture_target,
@@ -171,7 +171,7 @@
   get_gl_context_cb_ = base::Bind(&GetGLContext, stub_->AsWeakPtr());
   make_context_current_cb_ =
       base::Bind(&MakeDecoderContextCurrent, stub_->AsWeakPtr());
-#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_MACOSX)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_MACOSX) || defined(OS_LINUX)
   bind_image_cb_ = base::Bind(&BindImage, stub_->AsWeakPtr());
 #endif
   get_gles2_decoder_cb_ = base::Bind(&GetGLES2Decoder, stub_->AsWeakPtr());
diff -urN /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/media/gpu/ipc/service/gpu_video_encode_accelerator.cc chromium-55.0.2859.0/media/gpu/ipc/service/gpu_video_encode_accelerator.cc
--- /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/media/gpu/ipc/service/gpu_video_encode_accelerator.cc	2016-09-13 23:03:14.000000000 +0100
+++ chromium-55.0.2859.0/media/gpu/ipc/service/gpu_video_encode_accelerator.cc	2016-09-17 00:15:51.656127116 +0100
@@ -24,7 +24,7 @@
 #include "media/gpu/gpu_video_accelerator_util.h"
 #include "media/gpu/ipc/common/media_messages.h"
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
 #if defined(USE_V4L2_CODEC)
 #include "media/gpu/v4l2_video_encode_accelerator.h"
 #endif
@@ -60,7 +60,7 @@
   return true;
 }
 
-#if defined(OS_CHROMEOS) && defined(USE_V4L2_CODEC)
+#if (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(USE_V4L2_CODEC)
 std::unique_ptr<VideoEncodeAccelerator> CreateV4L2VEA() {
   scoped_refptr<V4L2Device> device = V4L2Device::Create(V4L2Device::kEncoder);
   if (!device)
@@ -70,7 +70,7 @@
 }
 #endif
 
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
 std::unique_ptr<VideoEncodeAccelerator> CreateVaapiVEA() {
   return base::WrapUnique<VideoEncodeAccelerator>(
       new VaapiVideoEncodeAccelerator());
diff -urN /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/media/gpu/jpeg_decode_accelerator_unittest.cc chromium-55.0.2859.0/media/gpu/jpeg_decode_accelerator_unittest.cc
--- /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/media/gpu/jpeg_decode_accelerator_unittest.cc	2016-09-13 23:03:14.000000000 +0100
+++ chromium-55.0.2859.0/media/gpu/jpeg_decode_accelerator_unittest.cc	2016-09-17 00:05:51.313001611 +0100
@@ -31,7 +31,7 @@
 #include "third_party/libyuv/include/libyuv.h"
 #include "ui/gfx/codec/jpeg_codec.h"
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
 #if defined(USE_V4L2_CODEC)
 #include "media/gpu/v4l2_device.h"
 #include "media/gpu/v4l2_jpeg_decode_accelerator.h"
@@ -133,10 +133,10 @@
 JpegClient::~JpegClient() {}
 
 void JpegClient::CreateJpegDecoder() {
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
   decoder_.reset(
       new VaapiJpegDecodeAccelerator(base::ThreadTaskRunnerHandle::Get()));
-#elif defined(OS_CHROMEOS) && defined(USE_V4L2_CODEC)
+#elif (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(USE_V4L2_CODEC)
   scoped_refptr<V4L2Device> device =
       V4L2Device::Create(V4L2Device::kJpegDecoder);
   if (!device.get()) {
@@ -564,7 +564,7 @@
       continue;
     LOG(FATAL) << "Unexpected switch: " << it->first << ":" << it->second;
   }
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
   media::VaapiWrapper::PreSandboxInitialization();
 #endif
 
diff -urN /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/media/gpu/video_decode_accelerator_unittest.cc chromium-55.0.2859.0/media/gpu/video_decode_accelerator_unittest.cc
--- /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/media/gpu/video_decode_accelerator_unittest.cc	2016-09-13 23:03:14.000000000 +0100
+++ chromium-55.0.2859.0/media/gpu/video_decode_accelerator_unittest.cc	2016-09-17 00:05:51.589670969 +0100
@@ -65,16 +65,16 @@
 #if defined(OS_WIN)
 #include "base/win/windows_version.h"
 #include "media/gpu/dxva_video_decode_accelerator_win.h"
-#elif defined(OS_CHROMEOS)
+#elif defined(OS_CHROMEOS) || defined(OS_LINUX)
 #if defined(USE_V4L2_CODEC)
 #include "media/gpu/v4l2_device.h"
 #include "media/gpu/v4l2_slice_video_decode_accelerator.h"
 #include "media/gpu/v4l2_video_decode_accelerator.h"
 #endif
-#if defined(ARCH_CPU_X86_FAMILY)
+#if defined(ARCH_CPU_X86_FAMILY) || defined(OS_LINUX)
 #include "media/gpu/vaapi_video_decode_accelerator.h"
 #include "media/gpu/vaapi_wrapper.h"
-#endif  // defined(ARCH_CPU_X86_FAMILY)
+#endif  // defined(ARCH_CPU_X86_FAMILY) || defined(OS_LINUX)
 #else
 #error The VideoAccelerator tests are not supported on this platform.
 #endif  // OS_WIN
@@ -1780,7 +1780,7 @@
   ui::OzonePlatform::InitializeForUI();
 #endif
 
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
   media::VaapiWrapper::PreSandboxInitialization();
 #endif
 
diff -urN /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/media/gpu/video_encode_accelerator_unittest.cc chromium-55.0.2859.0/media/gpu/video_encode_accelerator_unittest.cc
--- /var/tmp/portage/www-client/chromium-55.0.2859.0/work/chromium-55.0.2859.0/media/gpu/video_encode_accelerator_unittest.cc	2016-09-13 23:03:14.000000000 +0100
+++ chromium-55.0.2859.0/media/gpu/video_encode_accelerator_unittest.cc	2016-09-17 00:21:05.387687008 +0100
@@ -50,11 +50,11 @@
 #include "media/video/video_encode_accelerator.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
 #if defined(USE_V4L2_CODEC)
 #include "media/gpu/v4l2_video_encode_accelerator.h"
 #endif
-#if defined(ARCH_CPU_X86_FAMILY)
+#if defined(ARCH_CPU_X86_FAMILY) || defined(OS_LINUX)
 #include "media/gpu/vaapi_video_encode_accelerator.h"
 #include "media/gpu/vaapi_wrapper.h"
 // Status has been defined as int in Xlib.h.
@@ -1130,7 +1130,7 @@
 
 std::unique_ptr<VideoEncodeAccelerator> VEAClient::CreateV4L2VEA() {
   std::unique_ptr<VideoEncodeAccelerator> encoder;
-#if defined(OS_CHROMEOS) && defined(USE_V4L2_CODEC)
+#if (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(USE_V4L2_CODEC)
   scoped_refptr<V4L2Device> device = V4L2Device::Create(V4L2Device::kEncoder);
   if (device)
     encoder.reset(new V4L2VideoEncodeAccelerator(device));
@@ -1140,7 +1140,7 @@
 
 std::unique_ptr<VideoEncodeAccelerator> VEAClient::CreateVaapiVEA() {
   std::unique_ptr<VideoEncodeAccelerator> encoder;
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
   encoder.reset(new VaapiVideoEncodeAccelerator());
 #endif
   return encoder;
@@ -1935,7 +1935,7 @@
     LOG(FATAL) << "--measure_latency requires --run_at_fps enabled to work.";
   }
 
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)) || defined(OS_LINUX)
   media::VaapiWrapper::PreSandboxInitialization();
 #endif
 
--- chromium-55.0.2873.0/media/gpu/vaapi_wrapper.cc	2016-09-28 06:49:55.000000000 +0100
+++ chromium-55.0.2873.0.new/media/gpu/vaapi_wrapper.cc	2016-10-05 18:52:15.140194813 +0100
@@ -471,7 +471,11 @@
   unsigned int num_attribs;
   va_res = vaQuerySurfaceAttributes(va_display_, va_config_id, nullptr,
                                     &num_attribs);
-  VA_SUCCESS_OR_RETURN(va_res, "vaQuerySurfaceAttributes failed", false);
+  if (va_res != VA_STATUS_SUCCESS) {
+    resolution->SetSize(4096, 4096);
+    return true;
+  }
+
   if (!num_attribs)
     return false;
 
--- chromium-55.0.2873.0/content/common/sandbox_linux/bpf_gpu_policy_linux.cc	2016-09-28 06:49:54.000000000 +0100
+++ chromium-55.0.2873.0.new/content/common/sandbox_linux/bpf_gpu_policy_linux.cc	2016-10-05 18:14:55.748057651 +0100
@@ -24,6 +24,8 @@
 #include "base/memory/ptr_util.h"
 #include "base/strings/stringprintf.h"
 #include "build/build_config.h"
+// Auto-generated for dlopen libva libraries
+#include "content/common/va_stubs.h"
 #include "content/common/sandbox_linux/sandbox_bpf_base_policy_linux.h"
 #include "content/common/sandbox_linux/sandbox_seccomp_bpf_linux.h"
 #include "content/common/set_process_title.h"
@@ -34,6 +36,17 @@
 #include "sandbox/linux/syscall_broker/broker_file_permission.h"
 #include "sandbox/linux/syscall_broker/broker_process.h"
 #include "sandbox/linux/system_headers/linux_syscalls.h"
+#include "third_party/libva/va/va.h"
+#include "third_party/libva/va/va_backend.h"
+#if defined(USE_X11)
+#include "third_party/libva/va/va_x11.h"
+#include "ui/gfx/x/x11_types.h"
+#elif defined(USE_OZONE)
+#include "third_party/libva/va/va_drm.h"
+#include "third_party/libva/va/va_drmcommon.h"
+#endif 
+#define DRIVER_EXTENSION	"_drv_video.so"
+#define VA_DRIVERS_PATH		"/usr/lib64/va/drivers"
 
 using sandbox::arch_seccomp_data;
 using sandbox::bpf_dsl::Allow;
@@ -43,6 +56,15 @@
 using sandbox::syscall_broker::BrokerProcess;
 using sandbox::SyscallSets;
 
+using content_common::kModuleVa;
+#if defined(USE_X11)
+using content_common::kModuleVa_x11;
+#elif defined(USE_OZONE)
+using content_common::kModuleVa_drm;
+#endif
+using content_common::InitializeStubs;
+using content_common::StubPathMap;
+
 namespace content {
 
 namespace {
@@ -97,7 +119,7 @@
 
 bool IsAcceleratedVaapiVideoEncodeEnabled() {
   bool accelerated_encode_enabled = false;
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
   const base::CommandLine& command_line =
       *base::CommandLine::ForCurrentProcess();
   accelerated_encode_enabled =
@@ -282,6 +304,29 @@
   }
 }
 
+static VADisplay VaapiGetVADisplay() {
+  StubPathMap paths;
+  VADisplay va_display;
+  paths[kModuleVa].push_back("libva.so.1");
+#if defined(USE_OZONE)
+  paths[kModuleVa_drm].push_back("libva-drm.so.1");
+#elif defined (USE_X11)
+  paths[kModuleVa_x11].push_back("libva-x11.so.1");
+#endif
+  if (!InitializeStubs(paths)) {
+    return NULL;
+  }
+#if defined(USE_OZONE)
+  va_display = vaGetDisplayDRM(drm_fd_.get());
+#elif defined(USE_X11)
+  va_display = vaGetDisplay(gfx::GetXDisplay());
+#endif
+  if (!vaDisplayIsValid(va_display)) {
+    return NULL;
+  }
+  return va_display;
+}
+
 bool GpuProcessPolicy::PreSandboxHook() {
   // Warm up resources needed by the policy we're about to enable and
   // eventually start a broker process.
@@ -300,24 +345,75 @@
     // inside the sandbox, so preload them now.
     if (IsAcceleratedVaapiVideoEncodeEnabled() ||
         IsAcceleratedVideoDecodeEnabled()) {
-      const char* I965DrvVideoPath = NULL;
-      const char* I965HybridDrvVideoPath = NULL;
-
-      if (IsArchitectureX86_64()) {
-        I965DrvVideoPath = "/usr/lib64/va/drivers/i965_drv_video.so";
-        I965HybridDrvVideoPath = "/usr/lib64/va/drivers/hybrid_drv_video.so";
-      } else if (IsArchitectureI386()) {
-        I965DrvVideoPath = "/usr/lib/va/drivers/i965_drv_video.so";
-      }
-
-      dlopen(I965DrvVideoPath, RTLD_NOW | RTLD_GLOBAL | RTLD_NODELETE);
-      if (I965HybridDrvVideoPath)
-        dlopen(I965HybridDrvVideoPath, RTLD_NOW | RTLD_GLOBAL | RTLD_NODELETE);
-      dlopen("libva.so.1", RTLD_NOW | RTLD_GLOBAL | RTLD_NODELETE);
+// Init a VA Context, get driver name (and path), close context and preload 
+#if defined(USE_OZONE) || defined(USE_X11)
+      VADisplay va_display = VaapiGetVADisplay();
+      if (va_display) {
+          char *va_search_path = getenv("LIBVA_DRIVERS_PATH");
+          char *va_driver_name = getenv("LIBVA_DRIVER_NAME");
+          char *saveptr, *driver_dir;
+          VADisplayContextP pDisplayContext =
+                               static_cast<VADisplayContextP>(va_display);
+          pDisplayContext->vaGetDriverName(va_display, &va_driver_name);
+          if (va_driver_name) {
+            va_driver_name = strdup((const char*)va_driver_name);
+          } else
+              return true;
+
+          if (!va_search_path)
+                va_search_path = (char*)VA_DRIVERS_PATH;
+
+          va_search_path = strdup((const char*)va_search_path);
+          driver_dir = strtok_r(va_search_path, ":", &saveptr);
+          while (driver_dir) {
+            void *handle = NULL;
+            char *driver_path = (char *) malloc( strlen(driver_dir) +
+                                             strlen(va_driver_name) +
+                                             strlen(DRIVER_EXTENSION) + 2 );
+            if (!driver_path) {
+              free(va_search_path);    
+              // always return true otherwise *all* 
+              // GPU acceleration is disabled
+              return true;
+            }
+
+            strncpy( driver_path, driver_dir, strlen(driver_dir) + 1);
+            strncat( driver_path, "/", strlen("/") );
+            strncat( driver_path, va_driver_name, strlen(va_driver_name) );
+            strncat( driver_path, DRIVER_EXTENSION, strlen(DRIVER_EXTENSION) );
+        
+            // attempt to dlopen() the va driver
+            if ( access( driver_path, X_OK|R_OK ) != -1 ) {
+              printf("Attempting to pre-load %s VA driver...\n", va_driver_name);
+	      if (dlopen(driver_path, RTLD_NOW|RTLD_GLOBAL|RTLD_NODELETE)) {
+                printf("VA driver \"%s\" opened!\n", driver_path);
+
+                if (strcmp(va_driver_name, "nvidia" ) == 0) {
+                  printf("Pre-loading NVIDIA VDPAU driver libraries...\n");
+                  if(dlopen("libvdpau_nvidia.so", RTLD_NOW|RTLD_GLOBAL|RTLD_NODELETE))
+                    printf("Loaded libvdpau_nvidia.so\n");
+                  
+                  if (dlopen("libvdpau.so", RTLD_NOW|RTLD_GLOBAL|RTLD_NODELETE))
+                    printf("Loaded libvdpau.so\n");
+                }
+                printf("Loading libva libraries...\n");
+                dlopen("libva.so.1", RTLD_NOW|RTLD_GLOBAL|RTLD_NODELETE);
 #if defined(USE_OZONE)
-      dlopen("libva-drm.so.1", RTLD_NOW | RTLD_GLOBAL | RTLD_NODELETE);
+                dlopen("libva-drm.so.1", RTLD_NOW|RTLD_GLOBAL|RTLD_NODELETE);
 #elif defined(USE_X11)
-      dlopen("libva-x11.so.1", RTLD_NOW | RTLD_GLOBAL | RTLD_NODELETE);
+                dlopen("libva-x11.so.1", RTLD_NOW|RTLD_GLOBAL|RTLD_NODELETE);
+#endif
+                free(driver_path);
+                break;
+              }
+              printf("VA driver failed to open!\n");
+            }
+            free(driver_path);
+        
+            driver_dir = strtok_r(NULL, ":", &saveptr);
+          }
+        free(va_search_path);
+      }
 #endif
     }
   }
