--- ./third_party/skia/src/opts/SkBitmapProcState_opts_SSSE3.cpp.orig	2017-02-02 23:05:54.000000000 +0000
+++ ./third_party/skia/src/opts/SkBitmapProcState_opts_SSSE3.cpp	2017-02-06 18:55:26.657749914 +0000
@@ -10,6 +10,12 @@
 #include "SkPaint.h"
 #include "SkUtils.h"
 
+/* With the exception of the compilers that don't support it, we always build the
+ * SSSE3 functions and enable the caller to determine SSSE3 support.  However for
+ * compilers that do not support SSSE3 we provide a stub implementation.
+ */
+#if SK_CPU_SSE_LEVEL >= SK_CPU_SSE_LEVEL_SSSE3
+
 #include <tmmintrin.h>  // SSSE3
 
 // adding anonymous namespace seemed to force gcc to inline directly the
@@ -725,3 +731,31 @@
                                      int count, uint32_t* colors) {
     S32_generic_D32_filter_DXDY_SSSE3<true>(s, xy, count, colors);
 }
+
+#else // SK_CPU_SSE_LEVEL >= SK_CPU_SSE_LEVEL_SSSE3
+
+void S32_opaque_D32_filter_DX_SSSE3(const SkBitmapProcState& s,
+                                    const uint32_t* xy,
+                                    int count, uint32_t* colors) {
+    sk_throw();
+}
+
+void S32_alpha_D32_filter_DX_SSSE3(const SkBitmapProcState& s,
+                                   const uint32_t* xy,
+                                   int count, uint32_t* colors) {
+    sk_throw();
+}
+
+void S32_opaque_D32_filter_DXDY_SSSE3(const SkBitmapProcState& s,
+                                      const uint32_t* xy,
+                                      int count, uint32_t* colors) {
+    sk_throw();
+}
+
+void S32_alpha_D32_filter_DXDY_SSSE3(const SkBitmapProcState& s,
+                                     const uint32_t* xy,
+                                     int count, uint32_t* colors) {
+    sk_throw();
+}
+
+#endif
