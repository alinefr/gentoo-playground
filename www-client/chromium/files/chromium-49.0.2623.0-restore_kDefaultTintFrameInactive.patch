diff --git a/chrome/browser/ui/libgtk2ui/gtk2_ui.cc b/chrome/browser/ui/libgtk2ui/gtk2_ui.cc
index 4c119c5a..aa041df 100644
--- a/chrome/browser/ui/libgtk2ui/gtk2_ui.cc
+++ b/chrome/browser/ui/libgtk2ui/gtk2_ui.cc
@@ -300,14 +300,19 @@ const int kToolbarImageHeight = 128;
 
 // Values used as the new luminance and saturation values in the inactive tab
 // text color.
-const double kInactiveLuminance = 0.15;
-const double kInactiveSaturation = 0.3;
+const double kDarkInactiveLuminance = 0.85;
+const double kLightInactiveLuminance = 0.15;
+const double kHeavyInactiveSaturation = 0.7;
+const double kLightInactiveSaturation = 0.3;
 
 // TODO(erg): ThemeService has a whole interface just for reading default
 // constants. Figure out what to do with that more long term; for now, just
 // copy the constants themselves here.
 //
 // Default tints.
+const color_utils::HSL kDefaultTintButtons = { -1, -1, -1 };
+const color_utils::HSL kDefaultTintFrame = { -1, -1, -1 };
+const color_utils::HSL kDefaultTintFrameInactive = { -1, -1, 0.75f };
 const color_utils::HSL kDefaultTintFrameIncognito = { -1, 0.2f, 0.35f };
 const color_utils::HSL kDefaultTintFrameIncognitoInactive = { -1, 0.3f, 0.6f };
 const color_utils::HSL kDefaultTintBackgroundTab = { -1, 0.5, 0.75 };
@@ -373,6 +378,27 @@ void PickButtonTintFromColors(SkColor accent_color,
   }
 }
 
+// Copied Default blah sections from ThemeService.
+color_utils::HSL GetDefaultTint(int id) {
+  switch (id) {
+    case ThemeProperties::TINT_FRAME:
+      return kDefaultTintFrame;
+    case ThemeProperties::TINT_FRAME_INACTIVE:
+      return kDefaultTintFrameInactive;
+    case ThemeProperties::TINT_FRAME_INCOGNITO:
+      return kDefaultTintFrameIncognito;
+    case ThemeProperties::TINT_FRAME_INCOGNITO_INACTIVE:
+      return kDefaultTintFrameIncognitoInactive;
+    case ThemeProperties::TINT_BUTTONS:
+      return kDefaultTintButtons;
+    case ThemeProperties::TINT_BACKGROUND_TAB:
+      return kDefaultTintBackgroundTab;
+    default:
+      color_utils::HSL result = {-1, -1, -1};
+      return result;
+  }
+}
+
 // Returns a gfx::FontRenderParams corresponding to GTK's configuration.
 gfx::FontRenderParams GetGtkFontRenderParams() {
   GtkSettings* gtk_settings = gtk_settings_get_default();
@@ -895,12 +921,18 @@ void Gtk2UI::LoadGtkValues() {
   // background tab color, with the lightness and saturation moved in the
   // opposite direction. (We don't touch the hue, since there should be subtle
   // hints of the color in the text.)
-  color_utils::HSL inactive_tab_text_hsl;
-  color_utils::SkColorToHSL(
-      theme->GetSystemColor(ui::NativeTheme::kColorId_WindowBackground),
-      &inactive_tab_text_hsl);
-  inactive_tab_text_hsl.s = kInactiveLuminance;
-  inactive_tab_text_hsl.l = kInactiveSaturation;
+  color_utils::HSL inactive_tab_text_hsl = ColorToTint(
+      ThemeProperties::TINT_BACKGROUND_TAB,
+      theme->GetSystemColor(ui::NativeTheme::kColorId_WindowBackground));
+  if (inactive_tab_text_hsl.l < 0.5)
+    inactive_tab_text_hsl.l = kDarkInactiveLuminance;
+  else
+    inactive_tab_text_hsl.l = kLightInactiveLuminance;
+
+  if (inactive_tab_text_hsl.s < 0.5)
+    inactive_tab_text_hsl.s = kHeavyInactiveSaturation;
+  else
+    inactive_tab_text_hsl.s = kLightInactiveSaturation;
 
   colors_[ThemeProperties::COLOR_BACKGROUND_TAB_TEXT] =
       color_utils::HSLToSkColor(inactive_tab_text_hsl, 255);
@@ -988,13 +1020,13 @@ SkColor Gtk2UI::BuildFrameColors() {
 
   temp_color = color_utils::HSLShift(
       frame_color,
-      kDefaultTintFrameIncognito);
+      GetDefaultTint(ThemeProperties::TINT_FRAME_INCOGNITO));
   theme->GetChromeStyleColor("incognito-frame-color", &temp_color);
   colors_[ThemeProperties::COLOR_FRAME_INCOGNITO] = temp_color;
 
   temp_color = color_utils::HSLShift(
       frame_color,
-      kDefaultTintFrameIncognitoInactive);
+      GetDefaultTint(ThemeProperties::TINT_FRAME_INCOGNITO_INACTIVE));
   theme->GetChromeStyleColor("incognito-inactive-frame-color", &temp_color);
   colors_[ThemeProperties::COLOR_FRAME_INCOGNITO_INACTIVE] = temp_color;
 #else
@@ -1028,6 +1060,20 @@ SkColor Gtk2UI::BuildFrameColors() {
   return frame_color;
 }
 
+color_utils::HSL Gtk2UI::ColorToTint(int id, SkColor color) {
+  color_utils::HSL default_tint = GetDefaultTint(id);
+  color_utils::HSL hsl;
+  color_utils::SkColorToHSL(color, &hsl);
+
+  if (default_tint.s != -1)
+    hsl.s = default_tint.s;
+
+  if (default_tint.l != -1)
+    hsl.l = default_tint.l;
+
+  return hsl;
+}
+
 gfx::Image Gtk2UI::GenerateGtkThemeImage(int id) const {
   gfx::ImageSkiaSource* source = NULL;
 
@@ -1239,7 +1285,7 @@ SkBitmap Gtk2UI::GenerateFrameImage(
 SkBitmap Gtk2UI::GenerateTabImage(int base_id) const {
   const SkBitmap* base_image = GetThemeImageNamed(base_id).ToSkBitmap();
   SkBitmap bg_tint = SkBitmapOperations::CreateHSLShiftedBitmap(
-      *base_image, kDefaultTintBackgroundTab);
+      *base_image, GetDefaultTint(ThemeProperties::TINT_BACKGROUND_TAB));
   return SkBitmapOperations::CreateTiledBitmap(
       bg_tint, 0, 0, bg_tint.width(), bg_tint.height());
 }
