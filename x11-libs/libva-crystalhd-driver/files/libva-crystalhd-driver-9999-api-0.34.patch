--- ./configure.ac.orig	2013-10-23 17:56:07.725182341 +0100
+++ ./configure.ac	2013-10-23 18:09:29.981791195 +0100
@@ -179,17 +179,20 @@
                           ${VA_MICRO_VERSION:-0} "*" 100     + \
                           ${VA_SDS_VERSION:-0}`
 VA_DRIVER_INIT_FUNC="__vaDriverInit_${VA_MAJOR_VERSION}_${VA_MINOR_VERSION}"
-if test $va_full_version_int -ge 00310005; then
-    VA_DRIVER_INIT_FUNC="${VA_DRIVER_INIT_FUNC}_${VA_MICRO_VERSION}_sds${VA_SDS_VERSION}"
+if test $va_full_version_int -lt 00320000; then
+    if test $va_full_version_int -ge 00310005; then
+        VA_DRIVER_INIT_FUNC="${VA_DRIVER_INIT_FUNC}_${VA_MICRO_VERSION}_sds${VA_SDS_VERSION}"
+    else
+    	VA_DRIVER_INIT_FUNC="${VA_DRIVER_INIT_FUNC}_sds"
+    fi
+    if test "$ac_cv_libva_sds_extensions" = "yes"; then
+        AC_DEFINE_UNQUOTED([VA_DRIVER_INIT_FUNC], [$VA_DRIVER_INIT_FUNC], [Define driver entry-point])
+    else
+        AC_MSG_ERROR([Your VA API SDK does not include SDS extensions])
+    fi
 else
-    VA_DRIVER_INIT_FUNC="${VA_DRIVER_INIT_FUNC}_sds"
-fi
-if test "$ac_cv_libva_sds_extensions" = "yes"; then
     AC_DEFINE_UNQUOTED([VA_DRIVER_INIT_FUNC], [$VA_DRIVER_INIT_FUNC], [Define driver entry-point])
-else
-    AC_MSG_ERROR([Your VA API SDK does not include SDS extensions])
 fi
-
 dnl Check for OpenGL rendering extensions to VA API
 AC_CACHE_CHECK([for VA API (GLX extensions)],
   ac_cv_libva_glx_extensions, [
@@ -205,7 +208,7 @@
     # if !defined(VA_SDS_VERSION) || (VA_SDS_VERSION < $LIBVA_GLX_SDS_VERSION_0_31)
     #  error "VA API version >= 0.31.0-sds$LIBVA_GLX_SDS_VERSION_0_31 is required"
     # endif
-    #else
+    #elif !VA_CHECK_VERSION(0,32,0)
     # error "This version of VA API is not supported for OpenGL rendering"
     #endif
   ], [],
--- ./src/crystalhd_drv_video.h~	2013-10-23 17:03:21.000000000 +0100
+++ ./src/crystalhd_drv_video.h	2013-10-23 18:09:57.681789199 +0100
@@ -446,7 +446,7 @@
 	int num_attributes
 );
 
-VAStatus crystalhd_BufferInfo(
+static VAStatus crystalhd_BufferInfo(
 	VADriverContextP ctx,
 	VAContextID context,		/* in */
 	VABufferID buffer_id,		/* in */
--- ./src/crystalhd_drv_video.c.orig	2013-10-23 22:38:15.510629154 +0100
+++ ./src/crystalhd_drv_video.c	2013-10-23 22:40:55.973950924 +0100
@@ -1718,7 +1718,7 @@
 }
 
 
-VAStatus crystalhd_BufferInfo(
+static VAStatus crystalhd_BufferInfo(
 		VADriverContextP ctx,
 		VAContextID context,		/* in */
 		VABufferID buffer_id,		/* in */
@@ -1828,10 +1828,12 @@
 }
 
 VAStatus
-__vaDriverInit_0_32(
+VA_DRIVER_INIT_FUNC(
 		VADriverContextP ctx
 	)
 {
+	struct VADriverVTable * const vtable = ctx->vtable;
+
 	object_heap_iterator iter;
 	object_buffer_p obj_buffer;
 	object_config_p obj_config;
@@ -1848,50 +1850,50 @@
 	ctx->max_display_attributes = CRYSTALHD_MAX_DISPLAY_ATTRIBUTES;
 	ctx->str_vendor = CRYSTALHD_STR_VENDOR;
 
-	ctx->vtable->vaTerminate = crystalhd_Terminate;
-	ctx->vtable->vaQueryConfigEntrypoints = crystalhd_QueryConfigEntrypoints;
-	ctx->vtable->vaQueryConfigProfiles = crystalhd_QueryConfigProfiles;
-	ctx->vtable->vaQueryConfigEntrypoints = crystalhd_QueryConfigEntrypoints;
-	ctx->vtable->vaQueryConfigAttributes = crystalhd_QueryConfigAttributes;
-	ctx->vtable->vaCreateConfig = crystalhd_CreateConfig;
-	ctx->vtable->vaDestroyConfig = crystalhd_DestroyConfig;
-	ctx->vtable->vaGetConfigAttributes = crystalhd_GetConfigAttributes;
-	ctx->vtable->vaCreateSurfaces = crystalhd_CreateSurfaces;
-	ctx->vtable->vaDestroySurfaces = crystalhd_DestroySurfaces;
-	ctx->vtable->vaCreateContext = crystalhd_CreateContext;
-	ctx->vtable->vaDestroyContext = crystalhd_DestroyContext;
-	ctx->vtable->vaCreateBuffer = crystalhd_CreateBuffer;
-	ctx->vtable->vaBufferSetNumElements = crystalhd_BufferSetNumElements;
-	ctx->vtable->vaMapBuffer = crystalhd_MapBuffer;
-	ctx->vtable->vaUnmapBuffer = crystalhd_UnmapBuffer;
-	ctx->vtable->vaDestroyBuffer = crystalhd_DestroyBuffer;
-	ctx->vtable->vaBeginPicture = crystalhd_BeginPicture;
-	ctx->vtable->vaRenderPicture = crystalhd_RenderPicture;
-	ctx->vtable->vaEndPicture = crystalhd_EndPicture;
-	ctx->vtable->vaSyncSurface = crystalhd_SyncSurface;
-	ctx->vtable->vaQuerySurfaceStatus = crystalhd_QuerySurfaceStatus;
-	ctx->vtable->vaPutSurface = crystalhd_PutSurface;
-	ctx->vtable->vaQueryImageFormats = crystalhd_QueryImageFormats;
-	ctx->vtable->vaCreateImage = crystalhd_CreateImage;
-	ctx->vtable->vaDeriveImage = crystalhd_DeriveImage;
-	ctx->vtable->vaDestroyImage = crystalhd_DestroyImage;
-	ctx->vtable->vaSetImagePalette = crystalhd_SetImagePalette;
-	ctx->vtable->vaGetImage = crystalhd_GetImage;
-	ctx->vtable->vaPutImage = crystalhd_PutImage;
-	ctx->vtable->vaQuerySubpictureFormats = crystalhd_QuerySubpictureFormats;
-	ctx->vtable->vaCreateSubpicture = crystalhd_CreateSubpicture;
-	ctx->vtable->vaDestroySubpicture = crystalhd_DestroySubpicture;
-	ctx->vtable->vaSetSubpictureImage = crystalhd_SetSubpictureImage;
-	ctx->vtable->vaSetSubpictureChromakey = crystalhd_SetSubpictureChromakey;
-	ctx->vtable->vaSetSubpictureGlobalAlpha = crystalhd_SetSubpictureGlobalAlpha;
-	ctx->vtable->vaAssociateSubpicture = crystalhd_AssociateSubpicture;
-	ctx->vtable->vaDeassociateSubpicture = crystalhd_DeassociateSubpicture;
-	ctx->vtable->vaQueryDisplayAttributes = crystalhd_QueryDisplayAttributes;
-	ctx->vtable->vaGetDisplayAttributes = crystalhd_GetDisplayAttributes;
-	ctx->vtable->vaSetDisplayAttributes = crystalhd_SetDisplayAttributes;
-	ctx->vtable->vaLockSurface = crystalhd_LockSurface;
-	ctx->vtable->vaUnlockSurface = crystalhd_UnlockSurface;
-	ctx->vtable->vaBufferInfo = crystalhd_BufferInfo;
+	vtable->vaTerminate = crystalhd_Terminate;
+	vtable->vaQueryConfigEntrypoints = crystalhd_QueryConfigEntrypoints;
+	vtable->vaQueryConfigProfiles = crystalhd_QueryConfigProfiles;
+	vtable->vaQueryConfigEntrypoints = crystalhd_QueryConfigEntrypoints;
+	vtable->vaQueryConfigAttributes = crystalhd_QueryConfigAttributes;
+	vtable->vaCreateConfig = crystalhd_CreateConfig;
+	vtable->vaDestroyConfig = crystalhd_DestroyConfig;
+	vtable->vaGetConfigAttributes = crystalhd_GetConfigAttributes;
+	vtable->vaCreateSurfaces = crystalhd_CreateSurfaces;
+	vtable->vaDestroySurfaces = crystalhd_DestroySurfaces;
+	vtable->vaCreateContext = crystalhd_CreateContext;
+	vtable->vaDestroyContext = crystalhd_DestroyContext;
+	vtable->vaCreateBuffer = crystalhd_CreateBuffer;
+	vtable->vaBufferSetNumElements = crystalhd_BufferSetNumElements;
+	vtable->vaMapBuffer = crystalhd_MapBuffer;
+	vtable->vaUnmapBuffer = crystalhd_UnmapBuffer;
+	vtable->vaDestroyBuffer = crystalhd_DestroyBuffer;
+	vtable->vaBeginPicture = crystalhd_BeginPicture;
+	vtable->vaRenderPicture = crystalhd_RenderPicture;
+	vtable->vaEndPicture = crystalhd_EndPicture;
+	vtable->vaSyncSurface = crystalhd_SyncSurface;
+	vtable->vaQuerySurfaceStatus = crystalhd_QuerySurfaceStatus;
+	vtable->vaPutSurface = crystalhd_PutSurface;
+	vtable->vaQueryImageFormats = crystalhd_QueryImageFormats;
+	vtable->vaCreateImage = crystalhd_CreateImage;
+	vtable->vaDeriveImage = crystalhd_DeriveImage;
+	vtable->vaDestroyImage = crystalhd_DestroyImage;
+	vtable->vaSetImagePalette = crystalhd_SetImagePalette;
+	vtable->vaGetImage = crystalhd_GetImage;
+	vtable->vaPutImage = crystalhd_PutImage;
+	vtable->vaQuerySubpictureFormats = crystalhd_QuerySubpictureFormats;
+	vtable->vaCreateSubpicture = crystalhd_CreateSubpicture;
+	vtable->vaDestroySubpicture = crystalhd_DestroySubpicture;
+	vtable->vaSetSubpictureImage = crystalhd_SetSubpictureImage;
+	vtable->vaSetSubpictureChromakey = crystalhd_SetSubpictureChromakey;
+	vtable->vaSetSubpictureGlobalAlpha = crystalhd_SetSubpictureGlobalAlpha;
+	vtable->vaAssociateSubpicture = crystalhd_AssociateSubpicture;
+	vtable->vaDeassociateSubpicture = crystalhd_DeassociateSubpicture;
+	vtable->vaQueryDisplayAttributes = crystalhd_QueryDisplayAttributes;
+	vtable->vaGetDisplayAttributes = crystalhd_GetDisplayAttributes;
+	vtable->vaSetDisplayAttributes = crystalhd_SetDisplayAttributes;
+	vtable->vaLockSurface = crystalhd_LockSurface;
+	vtable->vaUnlockSurface = crystalhd_UnlockSurface;
+	vtable->vaBufferInfo = crystalhd_BufferInfo;
 
 	struct crystalhd_driver_data *driver_data = (struct crystalhd_driver_data *) malloc( sizeof(*driver_data) );
 	if ( NULL == driver_data )
